

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (9 June 2023 22:09:47) as /home/sofia/Downloads/cuises/cuis1/CuisUniversity-5832.image!


----End fileIn of /home/sofia/Downloads/cuises/cuis1/TusLibros-18.st----!

----STARTUP---- (9 June 2023 22:11:01) as /home/sofia/Downloads/cuises/cuis1/CuisUniversity-5832.image!


----End fileIn of /home/sofia/Downloads/cuises/cuis1/TusLibros-18.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:12:05'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:12:05'!
PASSED!
!Cart methodsFor: 'adding' stamp: 'SG 6/9/2023 22:12:28' prior: 50624420!
add: aQuantity of: anItem

	self assertIsValidQuantity: aQuantity.
	self assertIsValidItem: anItem.

	items add: anItem withOccurrences: aQuantity! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:12:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:12:28'!
PASSED!
!Cart methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:13:19' prior: 50624402!
initializeAcceptingItemsOf: aCatalog

	catalog := aCatalog.
	items := Bag new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:13:19'!
PASSED!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'SG 6/9/2023 22:13:58'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'SG 6/9/2023 22:15:01'!
TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'SG 6/9/2023 22:15:01'!
StoreTest subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

StoreTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'SG 6/9/2023 22:15:08'!
StoreTest subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:15:32'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!methodRemoval: CartTest #createCart stamp: 'SG 6/9/2023 22:15:32'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:15:35'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !

!methodRemoval: CartTest #defaultCatalog stamp: 'SG 6/9/2023 22:15:35'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:15:40'!
itemNotSellByTheStore
	
	^'invalidBook'! !

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'SG 6/9/2023 22:15:40'!
itemNotSellByTheStore
	
	^'invalidBook'!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:15:42'!
itemSellByTheStore
	
	^ 'validBook'! !

!methodRemoval: CartTest #itemSellByTheStore stamp: 'SG 6/9/2023 22:15:42'!
itemSellByTheStore
	
	^ 'validBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:15:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:15:51'!
PASSED!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:15:55' prior: 50624682!
defaultCatalog
	
	^ Set with: self itemSellByTheStore! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:15:57'!
PASSED!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/9/2023 22:17:30'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'SG 6/9/2023 22:17:24'!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart := self createCart.
	
	cashier := Cashier acceptingItemsOf: self defaultCatalog.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:17:35'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:17:39'!
acceptingItemsOf: aSet 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeAcceptingItemsOf: aSet ! !
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:17:48' prior: 50624782!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:17:50'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/9/2023 22:17:58'!
Object subclass: #Cashier
	instanceVariableNames: 'catalog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:17:58'!
initializeAcceptingItemsOf: aCatalog 
	self shouldBeImplemented.
	catalog := aCatalog.! !
!Cashier methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:18:01' prior: 50624806!
initializeAcceptingItemsOf: aCatalog 

	catalog := aCatalog.! !
!Cashier methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:18:05' prior: 50624812!
initializeAcceptingItemsOf: aCatalog 

	catalog := aCatalog! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:18:06'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:18:25'!
cantCheckoutEmptyCartErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:18:45' prior: 50624825!
cantCheckoutEmptyCartErrorDescription

	^ 'No se puede hacer checkout de un carrito vaciÃÅo'! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:18:46'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:18:52'!
checkout: cart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:19:10' prior: 50624839!
checkout: aCart

	self error: self class cantCheckoutEmptyCartErrorDescription ! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:19:11' prior: 50624843!
checkout: aCart

	self error: self class cantCheckoutEmptyCartErrorDescription! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:19:12'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:19:12'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:19:14'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:19:14'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:19:46'!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	
	cashier := Cashier acceptingItemsOf: self defaultCatalog.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:20:01' prior: 50624866!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := Cashier acceptingItemsOf: self defaultCatalog.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:21:05' prior: 50624875!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := Cashier acceptingItemsOf: self defaultCatalog.
	
	self assert: 10 equals: (cashier checkout: cart).! !

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:21:07'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:21:40' prior: 50624849!
checkout: aCart

	aCart isEmpty ifTrue: [ self error: self class cantCheckoutEmptyCartErrorDescription ].
	
	^ 10! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:21:40'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:21:40'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:21:55'!
assertIsValidCart: aCart

	^ aCart isEmpty ifTrue: [ self error: self class cantCheckoutEmptyCartErrorDescription ]! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:21:55' prior: 50624900!
checkout: aCart

	self assertIsValidCart: aCart.
	
	^ 10! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:22:26'!
createCashier

	^ Cashier acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:22:26' prior: 50624885!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 10 equals: (cashier checkout: cart).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:22:26' prior: 50624767!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart := self createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:24:08'!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 20 equals: (cashier checkout: cart).! !

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:24:10'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:24:44' prior: 50624920!
checkout: aCart

	| total |
	self assertIsValidCart: aCart.
	
	total := 0.
	aCart onItemsDo: [ :anItem | total := total + 10 ].
	
	^ total! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:24:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:24:48'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:24:48'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:24:52'!
ERROR!
!Cart methodsFor: 'enumeration' stamp: 'SG 6/9/2023 22:25:03'!
onItemsDo: aRenameMe1 
	self shouldBeImplemented.! !
!Cart methodsFor: 'enumeration' stamp: 'SG 6/9/2023 22:25:13' prior: 50624987!
onItemsDo: aBlock
	! !
!Cart methodsFor: 'enumeration' stamp: 'SG 6/9/2023 22:25:18' prior: 50624992!
onItemsDo: aBlock

	items do: aBlock! !

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:25:19'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:25:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:25:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:25:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:25:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:25:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:25:47' prior: 50624950!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 2 * self priceOfItemSoldByStore equals: (cashier checkout: cart).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:25:55' prior: 50625051!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 2 * self priceOfItemSoldByStore equals: (cashier checkout: cart).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:26:10' prior: 50624929!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart).! !

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:26:14'!
ERROR!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:26:18'!
priceOfItemSoldByStore
	self shouldBeImplemented.! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:26:22' prior: 50625091!
priceOfItemSoldByStore

	^ 10! !

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:26:24'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:26:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:26:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:26:24'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:27:46'!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore equals: (cashier checkout: cart).! !

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:28:17'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:28:17'!
ERROR!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:28:22'!
otherItemSellByTheStore
	self shouldBeImplemented.! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:28:41' prior: 50625136!
otherItemSellByTheStore

	^ 'another valid item'! !

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:28:41'!
ERROR!
!Cart methodsFor: 'error handling' stamp: 'SG 6/9/2023 22:28:43' overrides: 16902107!
error: aRenameMe1 
	self shouldBeImplemented.! !

!methodRemoval: Cart #error: stamp: 'SG 6/9/2023 22:28:51'!
error: aRenameMe1 
	self shouldBeImplemented.!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:28:59'!
ERROR!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:29:12' prior: 50624731!
defaultCatalog
	
	^ Set with: self itemSellByTheStore with: self otherItemSellByTheStore! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:29:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:29:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:14'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:14'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:29:21'!
priceOfOtherItemSellByTheStore
	self shouldBeImplemented.! !

!methodRemoval: CashierTest #priceOfOtherItemSellByTheStore stamp: 'SG 6/9/2023 22:29:27'!
priceOfOtherItemSellByTheStore
	self shouldBeImplemented.!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:29:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:29:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:28'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:28'!
ERROR!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:29:33'!
priceOfOtherItemSellByTheStore
	self shouldBeImplemented.! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:29:37' prior: 50625216!
priceOfOtherItemSellByTheStore

	^ 5! !

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:38'!
FAILURE!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:42'!
FAILURE!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:29:42'!
FAILURE!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:30:23' prior: 50625162!
defaultCatalog
	
	^ {
		self itemSellByTheStore -> self priceOfItemSoldByStore.
		self otherItemSellByTheStore -> self priceOfOtherItemSellByTheStore.
	} asDictionary! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:30:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:30:26'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:30:26'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:30:26'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SG 6/9/2023 22:30:35' prior: 50624412!
includes: anItem

	^items includesKey: anItem ! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:30:42'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:30:42'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:30:42'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:30:42'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:30:42'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:30:42'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:30:42'!
ERROR!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:30:42'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:30:44'!
ERROR!
!Cart methodsFor: 'testing' stamp: 'SG 6/9/2023 22:30:55' prior: 50625261!
includes: anItem

	^items includes: anItem ! !
!Cart methodsFor: 'assertions' stamp: 'SG 6/9/2023 22:31:06' prior: 50624389!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:31:07'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:31:09'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:31:09'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:31:09'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:31:09'!
FAILURE!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:31:09'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:31:29' prior: 50624966!
checkout: aCart

	| total |
	self assertIsValidCart: aCart.
	
	total := 0.
	aCart onItemsDo: [ :anItem | total := total + catalog at: anItem ].
	
	^ total! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:31:31'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:31:31'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:31:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:31:31'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:31:51'!
calculateTotalPrice: aCart
	
	| total |
	total := 0.
	aCart onItemsDo: [ :anItem | total := total + catalog at: anItem ].
	
	^ total! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:32:08' prior: 50625349!
checkout: aCart

	
	self assertIsValidCart: aCart.
	
	^ self calculateTotalPrice: aCart! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:32:11' prior: 50625379!
checkout: aCart

	self assertIsValidCart: aCart.
	
	^ self calculateTotalPrice: aCart! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:32:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:32:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:32:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:32:12'!
PASSED!
!Cart methodsFor: 'queries' stamp: 'SG 6/9/2023 22:32:59'!
calculateSubtotal

	^ items sum: [ :anItem | catalog at: anItem ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:33:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:33:02'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 22:33:13' prior: 50625372!
calculateTotalPrice: aCart
	
	^ aCart calculateSubtotal! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:33:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:33:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:13'!
PASSED!
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:33:28' prior: 50624791!
acceptingItemsOf: aCatalog

	^self new! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:33:31'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:33:31'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:31'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:31'!
PASSED!

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'SG 6/9/2023 22:33:38'!
initializeAcceptingItemsOf: aCatalog 

	catalog := aCatalog!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/9/2023 22:33:46'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:33:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:33:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:33:48'!
PASSED!

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'SG 6/9/2023 22:34:03'!
acceptingItemsOf: aCatalog

	^self new!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:34:03' prior: 50624674!
createCart
	
	^Cart new! !
!CashierTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:34:03' prior: 50624924!
createCashier

	^Cashier new! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:34:19'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:34:19'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:34:19'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:34:19'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:34:20'!
ERROR!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 22:35:24' prior: 50625504!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:35:27'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:35:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:35:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:35:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:35:28'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:35:47' prior: 50625114!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart).! !

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:35:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:35:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:35:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:35:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:35:52'!
PASSED!

StoreTest subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 22:37:41'!
StoreTest subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CreditCard stamp: 'SG 6/9/2023 22:38:29'!
StoreTest subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----SNAPSHOT----(9 June 2023 22:39:57) CuisUniversity-5832.image priorSource: 9366758!

StoreTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'SG 6/9/2023 22:41:06'!
StoreTest subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 22:44:19'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'no messages' stamp: 'SG 6/9/2023 22:44:16'!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard withNumber: -1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:44:22'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:44:33'!
invalidCreditCardNumberErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:44:54' prior: 50625658!
invalidCreditCardNumberErrorDescription

	^ 'El nuÃÅmero de la tarjeta de creÃÅdito debe ser un entero positivo'! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:44:56'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:45:01'!
withNumber: aSmallInteger 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aSmallInteger ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:45:24' prior: 50625674!
withNumber: anInteger

	^self new initializeWithNumber: anInteger! !
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:45:50' prior: 50625683!
withNumber: anInteger

	^self new initializeWithNumber: anInteger! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:45:52'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 22:46:00'!
Object subclass: #CreditCard
	instanceVariableNames: 'integer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:46:00'!
initializeWithNumber: anInteger 
	self shouldBeImplemented.
	integer := anInteger.! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:46:38' prior: 50625704!
initializeWithNumber: anInteger 

	anInteger strictlyPositive ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].

	integer := anInteger.! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:46:40'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:46:40'!
PASSED!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:47:00' prior: 50625645!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard withNumber: -1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:47:01'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:47:27' prior: 50625710!
initializeWithNumber: anInteger 

	anInteger isInteger ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].
	anInteger strictlyPositive ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].

	integer := anInteger.! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:47:28'!
PASSED!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 22:47:34'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:47:34' prior: 50625745!
initializeWithNumber: anInteger 

	anInteger isInteger ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].
	anInteger strictlyPositive ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].

	number := anInteger.! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:47:49'!
assertIsValidCreditCardNumber: anInteger

	anInteger isInteger ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ].
	anInteger strictlyPositive ifFalse: [ self error: self class invalidCreditCardNumberErrorDescription ]! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:47:49' prior: 50625767!
initializeWithNumber: anInteger 

	self assertIsValidCreditCardNumber: anInteger.

	number := anInteger.! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:48:24'!
test02CreditCardOwnerMustBeANonEmptyString

		self
		should: [ CreditCard withNumber: -1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:48:25' prior: 50625795!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: -1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:48:33' prior: 50625809!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: -1 ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:48:53' prior: 50625823!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: -1 withOwner: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardOwner.
! !

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:49:00'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:49:00'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:49:04'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:49:04'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:49:07'!
invalidCreditCardOwner
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:50:06' prior: 50625855!
invalidCreditCardOwner

	^ 'El due√±o de la tarjeta de creÃÅdito no puede estar vaciÃÅo'! !

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:50:07'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:50:29'!
emptyCreditCardOwnerErrorDescription

	^ 'El due√±o de la tarjeta de creÃÅdito no puede estar vaciÃÅo'! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:50:29' prior: 50625832!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: -1 withOwner: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!methodRemoval: CreditCard class #invalidCreditCardOwner stamp: 'SG 6/9/2023 22:50:29'!
invalidCreditCardOwner

	^ 'El due√±o de la tarjeta de creÃÅdito no puede estar vaciÃÅo'!
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:51:25'!
withNumber: anInteger owner: anOwner 

	^self new initializeWithNumber: anInteger! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:51:25' prior: 50625726!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard withNumber: -1 owner: 'HERNAN A WILKINSON' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 owner: 'HERNAN A WILKINSON' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !

!methodRemoval: CreditCard class #withNumber: stamp: 'SG 6/9/2023 22:51:25'!
withNumber: anInteger

	^self new initializeWithNumber: anInteger!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:51:40'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:51:45' prior: 50625876!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: -1 owner: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:51:46'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:51:55' prior: 50625921!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: 1 owner: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:51:56'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:52:19' prior: 50625789!
initializeWithNumber: anInteger

	self assertIsValidCreditCardNumber: anInteger.

	number := anInteger.! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:53:11'!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.

	number := anInteger.! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:53:11' prior: 50625891!
withNumber: anInteger owner: anOwner 

	^self new initializeWithNumber: anInteger andOwner: anOwner! !

!methodRemoval: CreditCard #initializeWithNumber: stamp: 'SG 6/9/2023 22:53:11'!
initializeWithNumber: anInteger

	self assertIsValidCreditCardNumber: anInteger.

	number := anInteger.!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 22:53:48'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:53:47' prior: 50625953!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	anOwner isEmpty ifFalse: [ self error: self class emptyCreditCardOwnerErrorDescription ].

	number := anInteger.
	owner := anOwner.! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:53:49' prior: 50625980!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	anOwner isEmpty ifFalse: [ self error: self class emptyCreditCardOwnerErrorDescription ].

	number := anInteger.
	owner := anOwner! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:53:51'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:53:51'!
FAILURE!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:53:51'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:02' prior: 50625991!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ].

	number := anInteger.
	owner := anOwner! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:54:03'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:54:03'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:32'!
assertIsNotEmpty: anOwner

	^ anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ]! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:32' prior: 50626012!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	self assertIsNotEmpty: anOwner.

	number := anInteger.
	owner := anOwner! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:46'!
assertIsValidOwner: anOwner

	^ anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ]! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 22:54:46' prior: 50626036!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	self assertIsValidOwner: anOwner.

	number := anInteger.
	owner := anOwner! !

!methodRemoval: CreditCard #assertIsNotEmpty: stamp: 'SG 6/9/2023 22:54:46'!
assertIsNotEmpty: anOwner

	^ anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ]!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:52' prior: 50626051!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	number := anInteger.

	self assertIsValidOwner: anOwner.

	owner := anOwner! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:53' prior: 50626066!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	number := anInteger.

	self assertIsValidOwner: anOwner.
	owner := anOwner! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:54:54'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:54:54'!
PASSED!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:54:57' prior: 50626075!
initializeWithNumber: anInteger andOwner: anOwner 

	self assertIsValidCreditCardNumber: anInteger.
	number := anInteger.

	self assertIsValidOwner: anOwner.
	owner := anOwner! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:55:03' prior: 50626091!
initializeWithNumber: aCreditCardNumber andOwner: anOwner 

	self assertIsValidCreditCardNumber: aCreditCardNumber.
	number := aCreditCardNumber.

	self assertIsValidOwner: anOwner.
	owner := anOwner! !
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 22:55:12' prior: 50625961!
withNumber: aCreditCardNumber owner: anOwner 

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:55:17'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:55:17'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:56:09'!
test03CreditCardOwnerCantHaveMoreThan30Characters

	self
		should: [ CreditCard withNumber: 1 owner: (String new: 31 withAll: $a ) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 22:56:14'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 22:56:37' prior: 50626164!
test03CreditCardOwnerCantHaveMoreThan30Characters

	self
		should: [ CreditCard withNumber: 1 owner: (String new: 31 withAll: $a ) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard creditCardOwnerOverCharacterLimitErrorDescription.
! !

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 22:56:38'!
ERROR!
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:56:44'!
creditCardOwnerOverCharacterLimitErrorDescription
	self shouldBeImplemented.! !
!CreditCard class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 22:57:11' prior: 50626193!
creditCardOwnerOverCharacterLimitErrorDescription

	^ 'El nombre del due√±o de la tarjeta de creÃÅdito debe tener a lo sumo 30 caracteres'! !

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 22:57:12'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:58:20' prior: 50626044!
assertIsValidOwner: anOwner

	anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ].
	(anOwner size > 30) ifTrue: [ self error: self class creditCardOwnerOverCharacterLimitErrorDescription ].! !
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 22:58:21' prior: 50626210!
assertIsValidOwner: anOwner

	anOwner isEmpty ifTrue: [ self error: self class emptyCreditCardOwnerErrorDescription ].
	(anOwner size > 30) ifTrue: [ self error: self class creditCardOwnerOverCharacterLimitErrorDescription ]! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 22:58:21'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 22:58:21'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 22:58:21'!
PASSED!

January / 2020!

January of: 2020!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:02:41'!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).
	
	! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:02:48' prior: 50626242!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:03:28' prior: 50626251!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	self deny: (creditCard hasExpiredBy: (December of: 1999)).! !

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:03:57'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 23:04:57'!
withNumber: aCreditCardNumber owner: anOwner expirationDate: aMonthOfYear  

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:04:57' prior: 50625897!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard withNumber: -1 owner: 'HERNAN A WILKINSON' expirationDate: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 owner: 'HERNAN A WILKINSON' expirationDate: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:04:57' prior: 50626178!
test03CreditCardOwnerCantHaveMoreThan30Characters

	self
		should: [ CreditCard withNumber: 1 owner: (String new: 31 withAll: $a ) expirationDate: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard creditCardOwnerOverCharacterLimitErrorDescription.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:04:57' prior: 50625934!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: 1 owner: '' expirationDate: '' ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!methodRemoval: CreditCard class #withNumber:owner: stamp: 'SG 6/9/2023 23:04:57'!
withNumber: aCreditCardNumber owner: anOwner 

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:05:17' prior: 50626282!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard withNumber: -1 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard withNumber: 1/2 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:05:18'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:05:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:05:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:05:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:05:18'!
ERROR!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:05:18'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:05:24' prior: 50626312!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard withNumber: 1 owner: '' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:05:29' prior: 50626300!
test03CreditCardOwnerCantHaveMoreThan30Characters

	self
		should: [ CreditCard withNumber: 1 owner: (String new: 31 withAll: $a ) expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard creditCardOwnerOverCharacterLimitErrorDescription.
! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:06:02'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:06:02'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:06:02'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:06:02'!
ERROR!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:06:02'!
ERROR!
!CreditCard methodsFor: 'queries' stamp: 'SG 6/9/2023 23:06:11'!
hasExpiredBy: aRenameMe1 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'queries' stamp: 'SG 6/9/2023 23:06:21' prior: 50626409!
hasExpiredBy: aMonthOfYear

	^ false
	! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:06:22'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:06:22'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:06:22'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:06:22'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:06:24'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:06:54'!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (February of: 2000)).! !

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/9/2023 23:06:55'!
FAILURE!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 23:07:32'!
initializeWithNumber: aCreditCardNumber andOwner: anOwner andExpirationDate: aMonthOfYear  

	self assertIsValidCreditCardNumber: aCreditCardNumber.
	number := aCreditCardNumber.

	self assertIsValidOwner: anOwner.
	owner := anOwner! !
!CreditCard class methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:07:32' prior: 50626274!
withNumber: aCreditCardNumber owner: anOwner expirationDate: aMonthOfYear  

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner andExpirationDate: aMonthOfYear! !

!methodRemoval: CreditCard #initializeWithNumber:andOwner: stamp: 'SG 6/9/2023 23:07:32'!
initializeWithNumber: aCreditCardNumber andOwner: anOwner 

	self assertIsValidCreditCardNumber: aCreditCardNumber.
	number := aCreditCardNumber.

	self assertIsValidOwner: anOwner.
	owner := anOwner!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'SG 6/9/2023 23:07:45'!
Object subclass: #CreditCard
	instanceVariableNames: 'number owner expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'SG 6/9/2023 23:07:44' prior: 50626450!
initializeWithNumber: aCreditCardNumber andOwner: anOwner andExpirationDate: aMonthOfYear  

	self assertIsValidCreditCardNumber: aCreditCardNumber.
	number := aCreditCardNumber.

	self assertIsValidOwner: anOwner.
	owner := anOwner.
	
	expirationDate := aMonthOfYear! !
!CreditCard methodsFor: 'queries' stamp: 'SG 6/9/2023 23:08:09' prior: 50626414!
hasExpiredBy: aMonthOfYear

	^ aMonthOfYear >= expirationDate! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:08:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:08:10'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:08:10'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:08:10'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/9/2023 23:08:10'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:08:41'!
createCreditCard

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:08:41' prior: 50626436!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCard.

	self assert: (creditCard hasExpiredBy: (February of: 2000)).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:08:41' prior: 50626260!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := self createCreditCard.

	self deny: (creditCard hasExpiredBy: (December of: 1999)).! !
!StoreTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:08:50'!
createCreditCard

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)! !

!methodRemoval: CreditCardTest #createCreditCard stamp: 'SG 6/9/2023 23:08:50'!
createCreditCard

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:00'!
dateAfterCreditCardExpirationDate

	^ February of: 2000! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:00' prior: 50626527!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCard.

	self assert: (creditCard hasExpiredBy: (self dateAfterCreditCardExpirationDate)).! !
!StoreTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:03'!
dateAfterCreditCardExpirationDate

	^ February of: 2000! !

!methodRemoval: CreditCardTest #dateAfterCreditCardExpirationDate stamp: 'SG 6/9/2023 23:10:03'!
dateAfterCreditCardExpirationDate

	^ February of: 2000!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:17'!
dateBeforeCreditCardExpiration

	^ December of: 1999! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:17' prior: 50626535!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := self createCreditCard.

	self deny: (creditCard hasExpiredBy: (self dateBeforeCreditCardExpiration)).! !
!StoreTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:25'!
dateBeforeCreditCardExpiration

	^ December of: 1999! !

!methodRemoval: CreditCardTest #dateBeforeCreditCardExpiration stamp: 'SG 6/9/2023 23:10:25'!
dateBeforeCreditCardExpiration

	^ December of: 1999!
!StoreTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:10:34'!
dateAfterCreditCardExpiration

	^ February of: 2000! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:10:34' prior: 50626560!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCard.

	self assert: (creditCard hasExpiredBy: (self dateAfterCreditCardExpiration)).! !

!methodRemoval: StoreTest #dateAfterCreditCardExpirationDate stamp: 'SG 6/9/2023 23:10:34'!
dateAfterCreditCardExpirationDate

	^ February of: 2000!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:14:27'!
test05CheckoutFailsIfGivenCreditCardHasExpired

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart).! !

!methodRemoval: CashierTest #test05CheckoutFailsIfGivenCreditCardHasExpired stamp: 'SG 6/9/2023 23:14:28'!
test05CheckoutFailsIfGivenCreditCardHasExpired

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart).!

!methodRemoval: StoreTest #dateAfterCreditCardExpiration stamp: 'SG 6/9/2023 23:14:36'!
dateAfterCreditCardExpiration

	^ February of: 2000!

!methodRemoval: StoreTest #dateBeforeCreditCardExpiration stamp: 'SG 6/9/2023 23:14:38'!
dateBeforeCreditCardExpiration

	^ December of: 1999!
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:15:12' prior: 50626543!
createCreditCard

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:15:22'!
createCreditCard: aMonthOfYear

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:15:22' prior: 50626582!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := self createCreditCard: (January of: 2000).

	self deny: (creditCard hasExpiredBy: (self dateBeforeCreditCardExpiration)).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:15:22' prior: 50626604!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCard: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (self dateAfterCreditCardExpiration)).! !

!methodRemoval: StoreTest #createCreditCard stamp: 'SG 6/9/2023 23:15:22'!
createCreditCard

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000)!
!StoreTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:15:22' prior: 50626659!
createCreditCard: aMonthOfYear

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: aMonthOfYear! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:15:39'!
createCreditCardThatExpiresOn: aMonthOfYear

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: aMonthOfYear! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:15:39' prior: 50626667!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := self createCreditCardThatExpiresOn: (January of: 2000).

	self deny: (creditCard hasExpiredBy: (self dateBeforeCreditCardExpiration)).! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:15:39' prior: 50626677!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCardThatExpiresOn: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (self dateAfterCreditCardExpiration)).! !

!methodRemoval: StoreTest #createCreditCard: stamp: 'SG 6/9/2023 23:15:39'!
createCreditCard: aMonthOfYear

	^ CreditCard withNumber: 1234 owner: 'HERNAN A WILKINSON' expirationDate: aMonthOfYear!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:15:59' prior: 50626717!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCardThatExpiresOn: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (self future)).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:16:15' prior: 50626733!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard := self createCreditCardThatExpiresOn: self currentDate.

	self assert: (creditCard hasExpiredBy: (self futureDate)).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:16:29' prior: 50626707!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard := self createCreditCardThatExpiresOn: self currentDate.

	self deny: (creditCard hasExpiredBy: (self pastDate)).! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:16:49'!
currentDate

	^ January of: 2000! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:17:00'!
pastDate

	^ December of: 1999! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:17:10'!
futureDate

	^ February of: 2000! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:17:13'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/9/2023 23:17:13'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:18:24'!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: (self createCreditCardThatExpiresOn: self pastDate)).! !

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:18:25'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 23:19:27'!
checkout: aCart withCreditCard: aCreditCard 

	self assertIsValidCart: aCart.
	
	^ self calculateTotalPrice: aCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:19:27' prior: 50624939!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart := self createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ((self creditCardThatExpiresOn: self future)) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:19:27' prior: 50625077!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ((self creditCardThatExpiresOn: self future))).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:19:27' prior: 50625575!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ((self creditCardThatExpiresOn: self future))).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:19:27' prior: 50625064!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 2 * self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ((self creditCardThatExpiresOn: self future))).! !

!methodRemoval: Cashier #checkout: stamp: 'SG 6/9/2023 23:19:27'!
checkout: aCart

	self assertIsValidCart: aCart.
	
	^ self calculateTotalPrice: aCart!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:20:03' prior: 50626855!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart := self createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: (self createCreditCardThatExpiresOn: self futureDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:20:16' prior: 50626868!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:20:27' prior: 50626897!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: 2 * self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:20:37' prior: 50626942!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:20:47' prior: 50626881!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:20:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:20:53'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:20:55'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/9/2023 23:22:05' prior: 50626830!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart := self createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: (self createCreditCardThatExpiresOn: self pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:22:08'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:22:45' prior: 50625508!
createCashier

	^Cashier onDate: (1 of: self currentDate)! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:22:55'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:22:55'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:22:55'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:22:55'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:22:55'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:22:56'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:23:08' prior: 50627020!
createCashier

	^Cashier onDate: (1 / self currentDate)! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:23:10'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:23:10'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:23:10'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:23:10'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:23:10'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:23:11'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'SG 6/9/2023 23:23:23' prior: 50627046!
createCashier

	^Cashier onDate: self currentDate! !

2000!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:25:49'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:25:49'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:25:49'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:25:49'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:25:49'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:25:52'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 23:26:12'!
onDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOnDate: aGregorianMonthOfYear ! !
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/9/2023 23:26:25' prior: 50627098!
onDate: aDate

	^self new initializeOnDate: aDate! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:26:25'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/9/2023 23:26:29'!
Object subclass: #Cashier
	instanceVariableNames: 'date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SG 6/9/2023 23:26:29'!
initializeOnDate: aDate 
	self shouldBeImplemented.
	date := aDate.! !
!Cashier methodsFor: 'initialization' stamp: 'SG 6/9/2023 23:26:38' prior: 50627121!
initializeOnDate: aDate 

	date := aDate.! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/9/2023 23:26:41'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'SG 6/9/2023 23:26:41' prior: 50627126!
initializeOnDate: aDate 

	currentDate := aDate.! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:26:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:26:47'!
ERROR!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/9/2023 23:26:47'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:26:47'!
ERROR!
!Cashier class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 23:26:52'!
cantCheckoutUsingExpiredCreditCardErrorDescription
	self shouldBeImplemented.! !
!Cashier class methodsFor: 'error descriptions' stamp: 'SG 6/9/2023 23:27:14' prior: 50627209!
cantCheckoutUsingExpiredCreditCardErrorDescription

	^ 'No se puede hacer checkout utilizando una tarjeta de creÃÅdito vencida'! !

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:27:16'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 23:28:02' prior: 50626848!
checkout: aCart withCreditCard: aCreditCard 

	self assertIsValidCart: aCart.
	(aCreditCard hasExpiredBy: currentDate) ifTrue: [ self error: self class cantCheckoutUsingExpiredCreditCardErrorDescription ].

	^ self calculateTotalPrice: aCart! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:28:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:28:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:28:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:28:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:28:02'!
PASSED!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 23:28:20'!
assertCreditCardHasNotExpired: aCreditCard

	^ (aCreditCard hasExpiredBy: currentDate) ifTrue: [ self error: self class cantCheckoutUsingExpiredCreditCardErrorDescription ]! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/9/2023 23:28:20' prior: 50627225!
checkout: aCart withCreditCard: aCreditCard 

	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	^ self calculateTotalPrice: aCart! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/9/2023 23:28:25'!
PASSED!

----SNAPSHOT----(9 June 2023 23:28:28) CuisUniversity-5832.image priorSource: 9407170!

----QUIT----(9 June 2023 23:28:36) CuisUniversity-5832.image priorSource: 9461786!

----STARTUP---- (10 June 2023 15:03:49) as /home/sofia/Downloads/cuises/cuis1/CuisUniversity-5832.image!

!CreditCard class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 15:15:39'!
number: aCreditCardNumber owner: anOwner expirationDate: aMonthOfYear  

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner andExpirationDate: aMonthOfYear! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:15:39' prior: 50626379!
test03CreditCardOwnerCantHaveMoreThan30Characters

	self
		should: [ CreditCard number: 1 owner: (String new: 31 withAll: $a ) expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard creditCardOwnerOverCharacterLimitErrorDescription.
! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:15:39' prior: 50626328!
test01CreditCardNumberMustBeAStrictlyPositiveInteger

	
	self
		should: [ CreditCard number: -1 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription.
		
	self
		should: [ CreditCard number: 1/2 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard invalidCreditCardNumberErrorDescription! !
!StoreTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:15:39' prior: 50626699!
createCreditCardThatExpiresOn: aMonthOfYear

	^ CreditCard number: 1234 owner: 'HERNAN A WILKINSON' expirationDate: aMonthOfYear! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:15:39' prior: 50626368!
test02CreditCardOwnerMustBeANonEmptyString

	self
		should: [ CreditCard number: 1 owner: '' expirationDate: (January of: 2000) ]
		raise: Error - MessageNotUnderstood
		withMessageText: CreditCard emptyCreditCardOwnerErrorDescription.
! !

!methodRemoval: CreditCard class #withNumber:owner:expirationDate: stamp: 'SG 6/10/2023 15:15:39'!
withNumber: aCreditCardNumber owner: anOwner expirationDate: aMonthOfYear  

	^self new initializeWithNumber: aCreditCardNumber andOwner: anOwner andExpirationDate: aMonthOfYear!

Object subclass: #StoreTestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTestFactory category: 'TusLibros' stamp: 'SG 6/10/2023 15:19:03'!
Object subclass: #StoreTestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTestFactory methodsFor: 'no messages' stamp: 'SG 6/10/2023 15:19:19'!
defaultCatalog
	
	^ {
		self itemSellByTheStore -> self priceOfItemSoldByStore.
		self otherItemSellByTheStore -> self priceOfOtherItemSellByTheStore.
	} asDictionary! !
!StoreTestFactory methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:19:29'!
itemSellByTheStore
	
	^ 'validBook'! !
!StoreTestFactory methodsFor: 'catalog' stamp: 'SG 6/10/2023 15:19:43'!
priceOfItemSoldByStore

	^ 10! !
!StoreTestFactory methodsFor: 'catalog' stamp: 'SG 6/10/2023 15:20:00'!
otherItemSellByTheStore

	^ 'other valid item'! !
!StoreTestFactory methodsFor: 'catalog' stamp: 'SG 6/10/2023 15:20:11'!
priceOfOtherItemSellByTheStore

	^ 5! !
!StoreTestFactory methodsFor: 'nil' stamp: 'SG 6/10/2023 15:21:12'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!StoreTestFactory methodsFor: 'nil' stamp: 'SG 6/10/2023 15:21:36'!
createCreditCardThatExpiresOn: aMonthOfYear

	^ CreditCard number: 1234 owner: 'HERNAN A WILKINSON' expirationDate: aMonthOfYear! !
!StoreTestFactory methodsFor: 'nil' stamp: 'SG 6/10/2023 15:21:53'!
currentDate

	^ January of: 2000! !
!StoreTestFactory methodsFor: 'dates' stamp: 'SG 6/10/2023 15:22:01'!
futureDate

	^ February of: 2000! !
!StoreTestFactory methodsFor: 'dates' stamp: 'SG 6/10/2023 15:22:07'!
pastDate

	^ December of: 1999! !
!StoreTestFactory methodsFor: 'nil' stamp: 'SG 6/10/2023 15:22:15'!
createCashier

	^Cashier onDate: self currentDate! !

TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:29:17'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:29:39'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'nil' stamp: 'SG 6/10/2023 15:29:37' overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:29:41' prior: 50627490 overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory new! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:02' prior: 50624490!
test01NewCartsAreCreatedEmpty

	| cart |
	cart := testObjectFactory createCart.

	self assert: cart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:33' prior: 50624468!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:41' prior: 50627507!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testObjectFactory createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:52' prior: 50624495!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:53' prior: 50627534!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:30:57' prior: 50627542!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'nil' stamp: 'SG 6/10/2023 15:31:22'!
createCart

	^ testObjectFactory createCart! !

!methodRemoval: CartTest #createCart stamp: 'SG 6/10/2023 15:31:35'!
createCart

	^ testObjectFactory createCart!
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50624481!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50627550!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50624503!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50624455!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50624510!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50627520!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self 
		should: [ cart add: testObjectFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50624523!
test06CartRemembersAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:35' prior: 50627501!
test01NewCartsAreCreatedEmpty

	| cart |
	cart :=  testObjectFactory createCart.

	self assert: cart isEmpty! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:50' prior: 50627591!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self 
		should: [cart add: 0 of: testObjectFactory itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:31:56' prior: 50627604!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self 
		should: [cart add: 2 of: testObjectFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:32:05' prior: 50627632!
test06CartRemembersAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:32:23' prior: 50627675!
test06CartRemembersAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: testObjectFactory itemSellByTheStore.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:32:31' prior: 50627684!
test06CartRemembersAddedItems

	| cart item |
	
	cart :=  testObjectFactory createCart.
	
	item := testObjectFactory itemSellByTheStore.
	cart add: item.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:32:36' prior: 50627693!
test06CartRemembersAddedItems

	| cart item |
	
	cart :=  testObjectFactory createCart.
	item := testObjectFactory itemSellByTheStore.
	
	cart add: item.
	self assert: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:32:59' prior: 50627584!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	self deny: (cart includes: testObjectFactory itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:33:17' prior: 50627566!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart :=  testObjectFactory createCart.
	
	cart add: 2 of: testObjectFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: testObjectFactory itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:33:19' prior: 50627721!
test08CartRemembersTheNumberOfAddedItems

	| cart item |
	
	cart :=  testObjectFactory createCart.
	
	cart add: 2 of: testObjectFactory itemSellByTheStore.
	item := testObjectFactory itemSellByTheStore.
	self assert: (cart occurrencesOf: item) = 2! !
!CartTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:33:26' prior: 50627731!
test08CartRemembersTheNumberOfAddedItems

	| cart item |
	
	cart :=  testObjectFactory createCart.
	item := testObjectFactory itemSellByTheStore.
	
	cart add: 2 of: item.
	self assert: (cart occurrencesOf: item) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:33:28'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 15:33:28'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:33:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:33:30'!
ERROR!
!StoreTestFactory methodsFor: 'catalog' stamp: 'SG 6/10/2023 15:33:52'!
itemNotSellByTheStore
	
	^ 'invalidBook'! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:33:54'!
PASSED!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:34:47'!
TestCase subclass: #StoreTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!StoreTest methodsFor: 'nil' stamp: 'SG 6/10/2023 15:34:44' overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory new! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:35:11' prior: 50625530!
createCart
	
	^ testObjectFactory createCart! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:35:26' prior: 50627382!
createCreditCardThatExpiresOn: aMonthOfYear

	^ testObjectFactory createCreditCardThatExpiresOn: aMonthOfYear! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:35:35' prior: 50626760!
currentDate

	^ testObjectFactory currentDate! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:35:47' prior: 50625238!
defaultCatalog
	
	^ testObjectFactory defaultCatalog ! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:35:47' prior: 50627842!
defaultCatalog
	
	^ testObjectFactory defaultCatalog! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:03' prior: 50626768!
futureDate

	^ testObjectFactory futureDate! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:12' prior: 50624690!
itemNotSellByTheStore
	
	^ testObjectFactory itemNotSellByTheStore ! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:12' prior: 50627856!
itemNotSellByTheStore
	
	^ testObjectFactory itemNotSellByTheStore! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:22' prior: 50624698!
itemSellByTheStore
	
	^ testObjectFactory itemSellByTheStore ! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:22' prior: 50627866!
itemSellByTheStore
	
	^ testObjectFactory itemSellByTheStore! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:31' prior: 50625141!
otherItemSellByTheStore

	^ testObjectFactory otherItemSellByTheStore! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:37' prior: 50626764!
pastDate

	^ testObjectFactory pastDate! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:51' prior: 50625096!
priceOfItemSoldByStore

	^ testObjectFactory priceOfItemSoldByStore! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:36:59' prior: 50625221!
priceOfOtherItemSellByTheStore

	^ testObjectFactory priceOfOtherItemSellByTheStore ! !
!StoreTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:37:00' prior: 50627890!
priceOfOtherItemSellByTheStore

	^ testObjectFactory priceOfOtherItemSellByTheStore! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:37:18'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:37:24'!
PASSED!

!methodRemoval: StoreTest #setUp stamp: 'SG 6/10/2023 15:39:03'!
setUp

	testObjectFactory := StoreTestFactory new!
!CreditCardTest methodsFor: 'nil' stamp: 'SG 6/10/2023 15:39:05' overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory new! !
!CashierTest methodsFor: 'nil' stamp: 'SG 6/10/2023 15:39:11' overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory new! !

!methodRemoval: CreditCardTest #setUp stamp: 'SG 6/10/2023 15:39:20'!
setUp

	testObjectFactory := StoreTestFactory new!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 15:39:23' prior: 50628035 overrides: 16961394!
setUp

	testObjectFactory := StoreTestFactory new! !

TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #StoreTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:39:59'!
TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: StoreTest #createCart stamp: 'SG 6/10/2023 15:40:09'!
createCart
	
	^ testObjectFactory createCart!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:09' prior: 50626929!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:09' prior: 50627000!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: (self createCreditCardThatExpiresOn: self pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:09' prior: 50626957!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:09' prior: 50626916!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: (self createCreditCardThatExpiresOn: self futureDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:09' prior: 50626972!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ((self createCreditCardThatExpiresOn: self futureDate))).! !

!methodRemoval: StoreTest #createCreditCardThatExpiresOn: stamp: 'SG 6/10/2023 15:40:14'!
createCreditCardThatExpiresOn: aMonthOfYear

	^ testObjectFactory createCreditCardThatExpiresOn: aMonthOfYear!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50628110!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self futureDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50626751!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard :=  testObjectFactory createCreditCardThatExpiresOn: self currentDate.

	self deny: (creditCard hasExpiredBy: (self pastDate)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50628095!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self futureDate)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50628064!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self futureDate)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50628124!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self futureDate)).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50626742!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard :=  testObjectFactory createCreditCardThatExpiresOn: self currentDate.

	self assert: (creditCard hasExpiredBy: (self futureDate)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:14' prior: 50628078!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !

!methodRemoval: StoreTest #currentDate stamp: 'SG 6/10/2023 15:40:19'!
currentDate

	^ testObjectFactory currentDate!
!CashierTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:40:19' prior: 50627072!
createCashier

	^Cashier onDate: ( testObjectFactory currentDate)! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:19' prior: 50628218!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard :=  testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory currentDate).

	self assert: (creditCard hasExpiredBy: (self futureDate)).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:19' prior: 50628161!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard :=  testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory currentDate).

	self deny: (creditCard hasExpiredBy: (self pastDate)).! !

!methodRemoval: StoreTest #defaultCatalog stamp: 'SG 6/10/2023 15:40:22'!
defaultCatalog
	
	^ testObjectFactory defaultCatalog!

!methodRemoval: StoreTest #futureDate stamp: 'SG 6/10/2023 15:40:25'!
futureDate

	^ testObjectFactory futureDate!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:25' prior: 50628187!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:25' prior: 50628171!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:25' prior: 50628254!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard :=  testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory currentDate).

	self assert: (creditCard hasExpiredBy: ( testObjectFactory futureDate)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:25' prior: 50628147!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := self createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate)) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:40:25' prior: 50628201!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := self createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !

!methodRemoval: StoreTest #itemNotSellByTheStore stamp: 'SG 6/10/2023 15:40:29'!
itemNotSellByTheStore
	
	^ testObjectFactory itemNotSellByTheStore!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:41:50'!
StoreTest subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'support' stamp: 'SG 6/10/2023 15:41:48' prior: 50628249!
createCashier

	^testObjectFactory createCashier! !

!methodRemoval: CashierTest #createCashier stamp: 'SG 6/10/2023 15:42:09'!
createCashier

	^testObjectFactory createCashier!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:09' prior: 50628282!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:09' prior: 50628338!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: self priceOfItemSoldByStore + self priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:09' prior: 50628296!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:09' prior: 50628228!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: self itemSellByTheStore.
	cart add: self otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: self pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:09' prior: 50628323!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := testObjectFactory createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate)) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:29' prior: 50628410!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * self priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:42:35'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:47' prior: 50628377!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: self priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:42:55' prior: 50628482!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: testObjectFactory priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:43:10' prior: 50628392!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore + testObjectFactory priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:43:17' prior: 50628427!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:43:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:43:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:24'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:24'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:43:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:24'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:43:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:43:46'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:47'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:47'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:43:53' prior: 50628460!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate))).! !

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:55'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:43:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:43:57'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:43:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:43:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:44:00'!
PASSED!

!methodRemoval: StoreTest #itemSellByTheStore stamp: 'SG 6/10/2023 15:44:22'!
itemSellByTheStore
	
	^ testObjectFactory itemSellByTheStore!

!methodRemoval: StoreTest #otherItemSellByTheStore stamp: 'SG 6/10/2023 15:44:24'!
otherItemSellByTheStore

	^ testObjectFactory otherItemSellByTheStore!

!methodRemoval: StoreTest #pastDate stamp: 'SG 6/10/2023 15:44:25'!
pastDate

	^ testObjectFactory pastDate!

!methodRemoval: StoreTest #priceOfItemSoldByStore stamp: 'SG 6/10/2023 15:44:26'!
priceOfItemSoldByStore

	^ testObjectFactory priceOfItemSoldByStore!

!methodRemoval: StoreTest #priceOfOtherItemSellByTheStore stamp: 'SG 6/10/2023 15:44:27'!
priceOfOtherItemSellByTheStore

	^ testObjectFactory priceOfOtherItemSellByTheStore!

TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:44:33'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testObjectFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:45:08' prior: 50628264!
test04CreditCardHasntExpiredBeforeExpirationDate

	| creditCard |
	creditCard :=  CreditCard number: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	self deny: (creditCard hasExpiredBy: (December of: 1999)).! !

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:45:10'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:45:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:45:10'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:45:10'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:45:10'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:10'!
ERROR!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:10'!
ERROR!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:45:37' prior: 50628312!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard :=  CreditCard number: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (December of: 1999))! !

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:45:39'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:45:39'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:45:39'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:45:39'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:39'!
FAILURE!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:39'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:45:50' prior: 50628706!
test05CreditCardHasExpiredAfterExpirationDate

	| creditCard |
	creditCard :=  CreditCard number: 1234 owner: 'HERNAN A WILKINSON' expirationDate: (January of: 2000).

	self assert: (creditCard hasExpiredBy: (February of: 2000))! !

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:45:51'!
PASSED!

TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'SG 6/10/2023 15:45:58'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #StoreTest stamp: 'SG 6/10/2023 15:46:01'!
TestCase subclass: #StoreTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 15:46:06'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 15:46:06'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:48:04'!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	cashier
		checkout: cart
		withCreditCard: ( testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate).! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 15:57:56'!
Object subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:57:40' prior: 50628849!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashier.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 15:59:10'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:59:22' prior: 50628872!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashier.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 15:59:23'!
ERROR!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 15:59:44'!
hasCharged: price from: creditCard 
	self shouldBeImplemented.! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 15:59:50' prior: 50628922!
hasCharged: price from: creditCard 

	^ true! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 15:59:51'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 15:59:51'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 15:59:57' prior: 50628897!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashier.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:00:37' prior: 50628959!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashier.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:01:53'!
createCashierChargingFrom: aMerchantProcessor

	^Cashier onDate: self currentDate chargingFrom: aMerchantProcessor! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:02:30'!
defaultMerchantProcessor

	^ MockMerchantProcessor new! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:02:53' prior: 50627468!
createCashier

	^ self createCashierChargingFrom: self defaultMerchantProcessor! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:03:03'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:03:06'!
ERROR!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:03:13'!
onDate: aRenameMe1 chargingFrom: aMerchantProcessor 
	self shouldBeImplemented.! !

!methodRemoval: Cashier class #onDate:chargingFrom: stamp: 'SG 6/10/2023 16:03:31'!
onDate: aRenameMe1 chargingFrom: aMerchantProcessor 
	self shouldBeImplemented.!
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 16:04:56'!
onDate: aDate chargingFrom: aMerchantProcessor

	^self new initializeOnDate: aDate chargingFrom: aMerchantProcessor! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/10/2023 16:05:16'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:05:14'!
initializeOnDate: aDate chargingFrom: aMerchantProcessor

	currentDate := aDate.
	merchantProcessor := aMerchantProcessor! !

!methodRemoval: Cashier class #onDate: stamp: 'SG 6/10/2023 16:05:24'!
onDate: aDate

	^self new initializeOnDate: aDate!

!methodRemoval: Cashier #initializeOnDate: stamp: 'SG 6/10/2023 16:05:27'!
initializeOnDate: aDate 

	currentDate := aDate.!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:05:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 16:05:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 16:05:30'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:05:39' prior: 50628980!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 16:05:41'!
PASSED!

!classDefinition: #MerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:09:42'!
Object subclass: #MerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:09:35'!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: MerchantProcessor outOfServiceErrorDescription
! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:09:51'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:09:51'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:09:51'!
ERROR!

MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:09:58'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:10:05'!
ERROR!
!MockMerchantProcessor methodsFor: 'simulation' stamp: 'SG 6/10/2023 16:10:18'!
simulateServiceOutage
	self shouldBeImplemented.! !

True!

true!

1 = 1!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:11:11'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'simulation' stamp: 'SG 6/10/2023 16:11:05' prior: 50629337!
simulateServiceOutage

	working := false! !

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:11:12'!
ERROR!
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'SG 6/10/2023 16:11:22'!
outOfServiceErrorDescription
	self shouldBeImplemented.! !
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'SG 6/10/2023 16:11:44' prior: 50629359!
outOfServiceErrorDescription

	^ 'El Merchant Processor estaÃÅ caiÃÅdo'! !

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:11:45'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:13:47' prior: 50629267!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: price from: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:13:54' prior: 50629374!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ price := cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: price from: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:13:59' prior: 50629402!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ price := cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:14:04' prior: 50629431!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:14:41'!
FAILURE!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:14:52' prior: 50629172!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: creditCard)! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:14:54'!
ERROR!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:14:58'!
hasCharged: creditCard 
	self shouldBeImplemented.! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:15:02' prior: 50629516!
hasCharged: creditCard 

	^ true! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:15:03'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:15:03'!
FAILURE!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:15:03'!
FAILURE!

!methodRemoval: MockMerchantProcessor #hasCharged:from: stamp: 'SG 6/10/2023 16:15:07'!
hasCharged: price from: creditCard 

	^ true!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/10/2023 16:15:34' prior: 50627262!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/10/2023 16:15:40' prior: 50629563!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	^ price! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/10/2023 16:15:55' prior: 50629572!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	merchantProcessor charge: price from: aCreditCard
	
	^ price! !
!Cashier methodsFor: 'checkout' stamp: 'SG 6/10/2023 16:15:57' prior: 50629581!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	merchantProcessor charge: price from: aCreditCard.
	
	^ price! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:16:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:16:02'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:16:02'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:16:02'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:16:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:16:02'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:16:02'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:16:04'!
ERROR!
!MerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:16:16'!
charge: price from: aCreditCard 
	self shouldBeImplemented.! !
!MerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:16:23' prior: 50629632!
charge: price from: aCreditCard 

	self subclassResponsibility! !

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:16:24'!
FAILURE!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:16:41' overrides: 50629637!
charge: anAmount from: aCreditCard! !
!MerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:16:46' prior: 50629637!
charge: anAmount from: aCreditCard 

	self subclassResponsibility! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:17:28' prior: 50629646 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ]
	
	! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:17:30' prior: 50629656 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ]
! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:17:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:17:36'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:17:36'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:17:36'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:17:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:17:36'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:17:36'!
FAILURE!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:17:38'!
ERROR!
!MockMerchantProcessor methodsFor: 'nil' stamp: 'SG 6/10/2023 16:17:52' overrides: 16920235!
initialize

	working := true! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:18:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:18:02'!
FAILURE!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:18:02'!
FAILURE!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:18:44'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working creditCardsCharged'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:18:41' prior: 50629701 overrides: 16920235!
initialize

	working := true.
	creditCardsCharged := OrderedCollection new! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:19:00' prior: 50629664 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	
	creditCardsCharged add: aCreditCard 
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:19:01' prior: 50629750 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	
	creditCardsCharged add: aCreditCard
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:19:11' prior: 50629521!
hasCharged: aCreditCard 

	^ true! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:19:21' prior: 50629767!
hasCharged: aCreditCard 

	^ creditCardsCharged includes: aCreditCard! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:19:30'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:19:30'!
PASSED!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:20:03' prior: 50629744 overrides: 16920235!
initialize

	working := true.
	creditCardsCharged := Set new! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:20:06'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:20:06'!
PASSED!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:20:32' prior: 50629805 overrides: 16920235!
initialize

	working := true.
	creditCardsCharged := OrderedCollection new! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:20:48' prior: 50629490!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:20:50'!
ERROR!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:20:55'!
hasCharged: price from: creditCard 
	self shouldBeImplemented.! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:21:31' prior: 50629869!
hasCharged: price from: creditCard 

	^ creditCardsCharged includes: creditCard@price! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:21:35'!
ERROR!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:21:55' prior: 50629874!
hasCharged: price from: creditCard 

	^ creditCardsCharged includes: creditCard -> price! !

1 -> $a!

(1 -> $a) class!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:24:14' prior: 50629759 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	
	creditCardsCharged add: aCreditCard -> anAmount
! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:24:27'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:24:43'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:24:45'!
PASSED!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:26:03' prior: 50629772!
hasCharged: aCreditCard 

	^ creditCardsCharged anySatisfy: [:anAssociation | anAssociation key = aCreditCard ]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:26:05'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:26:05'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:28:55'!
test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory createCreditCardThatExpiresOn: testObjectFactory futureDate.
	merchantProcessor := MockMerchantProcessor withBalances: { creditCard -> 5 }.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor notEnoughBalanceForTransactionErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:29:34'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:29:34'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:29:34'!
ERROR!
!MockMerchantProcessor class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 16:29:39'!
withBalances: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithBalances: anArray ! !
!MockMerchantProcessor class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 16:30:07' prior: 50630028!
withBalances: aMappingOfCreditCardsToBalances

	^self new initializeWithBalances: aMappingOfCreditCardsToBalances! !

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:30:10'!
ERROR!

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:30:13'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working creditCardsCharged mappingOfCreditCardsToBalances'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:30:13'!
initializeWithBalances: aMappingOfCreditCardsToBalances 
	self shouldBeImplemented.
	mappingOfCreditCardsToBalances := aMappingOfCreditCardsToBalances.! !
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:30:34' prior: 50630057!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	mappingOfCreditCardsToBalances := aMappingOfCreditCardsToBalances asDictionary.! !

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:30:35'!
FAILURE!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:31:42' prior: 50629892 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	
	creditCardsCharged add: aCreditCard -> anAmount
! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:31:44'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:31:44'!
FAILURE!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:31:44'!
FAILURE!
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'SG 6/10/2023 16:32:15'!
notEnoughBalanceForTransactionErrorDescription

	^ 'La cuenta no tiene saldo suficiente para la transaccioÃÅn'! !

!methodRemoval: MockMerchantProcessor #initialize stamp: 'SG 6/10/2023 16:32:22'!
initialize

	working := true.
	creditCardsCharged := OrderedCollection new!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:32:37' prior: 50630078 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].

	creditCardsCharged add: aCreditCard -> anAmount
! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:32:45'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working creditCardsCharged balances'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:32:45' prior: 50630065!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:33:28' prior: 50630133 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardsCharged add: aCreditCard -> anAmount
! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:33:30'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:33:30'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:33:30'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:33:30'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:33:30'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:33:30'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:33:30'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:33:30'!
ERROR!
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:34:52' prior: 50629007!
defaultMerchantProcessor

	^ MockMerchantProcessor withBalances: { self createCreditCardThatExpiresOn: self currentDate }! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:35:11' prior: 50630201!
defaultMerchantProcessor

	^ MockMerchantProcessor withBalances: { self createCreditCardThatExpiresOn: self currentDate -> 1000 }! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:35:17' prior: 50630208!
defaultMerchantProcessor

	^ MockMerchantProcessor withBalances: { (self createCreditCardThatExpiresOn: self currentDate) -> 1000 }! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:35:25'!
defaultCreditCard

	^ self createCreditCardThatExpiresOn: self currentDate! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:35:25' prior: 50630215!
defaultMerchantProcessor

	^ MockMerchantProcessor withBalances: { (self defaultCreditCard) -> 1000 }! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:35:29' prior: 50630228!
defaultMerchantProcessor

	^ MockMerchantProcessor withBalances: { self defaultCreditCard -> 1000 }! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:00'!
defaultCreditCard

	^ testObjectFactory createCreditCardThatExpiresOn: ( testObjectFactory futureDate)! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:00' prior: 50628497!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: testObjectFactory priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( self defaultCreditCard)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:00' prior: 50628513!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore + testObjectFactory priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( self defaultCreditCard)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:00' prior: 50628445!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := testObjectFactory createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ( self defaultCreditCard) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:00' prior: 50628590!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( self defaultCreditCard)).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:11' prior: 50630241!
defaultCreditCard

	^ testObjectFactory defaultCreditCard! !

!methodRemoval: CashierTest #defaultCreditCard stamp: 'SG 6/10/2023 16:36:17'!
defaultCreditCard

	^ testObjectFactory defaultCreditCard!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:17' prior: 50630247!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: testObjectFactory priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: ( ( testObjectFactory defaultCreditCard))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:17' prior: 50630261!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore + testObjectFactory priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: ( ( testObjectFactory defaultCreditCard))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:17' prior: 50630279!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := testObjectFactory createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: ( ( testObjectFactory defaultCreditCard)) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:17' prior: 50630292!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: ( ( testObjectFactory defaultCreditCard))).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:29' prior: 50630317!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self assert: testObjectFactory priceOfItemSoldByStore equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:36' prior: 50630363!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: 2 * testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:42' prior: 50630331!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore + testObjectFactory priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:36:49' prior: 50628533!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: (testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:37:02' prior: 50629843!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:37:09' prior: 50629459!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := MockMerchantProcessor new.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:37:22' prior: 50629966!
test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := MockMerchantProcessor withBalances: { creditCard -> 5 }.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor notEnoughBalanceForTransactionErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:37:33' prior: 50630222!
defaultCreditCard

	^ self createCreditCardThatExpiresOn: self futureDate! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:37:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:37:44'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:37:44'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:37:45'!
ERROR!
!CreditCard methodsFor: 'nil' stamp: 'SG 6/10/2023 16:38:56' overrides: 16901772!
= otherCreditCard

	^ number = otherCreditCard number
		and: [ owner = otherCreditCard owner ]
		and: [ expirationDate = otherCreditCard expirationDate ]! !
!CreditCard methodsFor: 'nil' stamp: 'SG 6/10/2023 16:39:31'!
number

	^ number! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:39:35'!
owner

	^ number! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:39:38' prior: 50630572!
owner

	^ owner! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:39:44'!
expirationDate

	^ expirationDate! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:39:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:39:52'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:39:52'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:39:53'!
ERROR!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:40:19' prior: 50630151!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.
	creditCardsCharged := OrderedCollection new.! !
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:40:20' prior: 50630618!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.
	creditCardsCharged := OrderedCollection new! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:40:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:40:26'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:40:26'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:40:26'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:40:26'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:40:26'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:40:26'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:40:26'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:40:27'!
ERROR!
!CreditCard methodsFor: 'comparing' stamp: 'SG 6/10/2023 16:42:56' overrides: 16901788!
hash

	^ (number hash bitXor: owner hash) bitXor: expirationDate hash! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:42:58'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:42:58'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:42:58'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:42:59'!
ERROR!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:45:19' prior: 50630468!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := MockMerchantProcessor withBalances: {}.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:45:58' prior: 50630447!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashier.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:46:15' prior: 50630736!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:46:16'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:46:16'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:46:34' prior: 50630709!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor .
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:46:34' prior: 50630813!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasCharged: creditCard)
		]! !

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:46:36'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 16:46:37'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 16:46:37'!
PASSED!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:47:00' prior: 50630159 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardsCharged add: aCreditCard -> anAmount.
! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'SG 6/10/2023 16:47:06'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working creditCardCharges balances'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:47:06' prior: 50629884!
hasCharged: price from: creditCard 

	^ creditCardCharges includes: creditCard -> price! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:47:06' prior: 50630975 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardCharges add: aCreditCard -> anAmount.
! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:47:06' prior: 50630627!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.
	creditCardCharges := OrderedCollection new! !
!MockMerchantProcessor methodsFor: 'as yet unclassified' stamp: 'SG 6/10/2023 16:47:06' prior: 50629934!
hasCharged: aCreditCard 

	^ creditCardCharges anySatisfy: [:anAssociation | anAssociation key = aCreditCard ]! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:47:23' prior: 50631003 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardCharges add: aCreditCard -> anAmount.
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 16:47:25' prior: 50631033 overrides: 50629650!
charge: anAmount from: aCreditCard

	working ifFalse: [ self error: self class outOfServiceErrorDescription ].
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardCharges add: aCreditCard -> anAmount
! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:54:36'!
test09CashierRegistersSalesOnSalesBook

	| cart cashier creditCard salesBook |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'SG 6/10/2023 16:55:50' prior: 50631057!
test09CashierRegistersSalesOnSalesBook

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price! !

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 16:56:09'!
ERROR!
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:56:14'!
createCashierRegisteringSalesOn: salesBook 
	self shouldBeImplemented.! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:56:20' prior: 50631092!
createCashierRegisteringSalesOn: aSalesBook 
! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:57:24' prior: 50631098!
createCashierRegisteringSalesOn: aSalesBook 

	^ Cashier
		onDate: self currentDate
		chargingFrom: self defaultMerchantProcessor
		registeringSalesOn: aSalesBook! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'SG 6/10/2023 16:57:45' prior: 50629001!
createCashierChargingFrom: aMerchantProcessor

	^ Cashier
		onDate: self currentDate
		chargingFrom: aMerchantProcessor
		registeringSalesOn: OrderedCollection new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 16:57:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 16:57:47'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:57:48'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 16:57:53'!
onDate: aGregorianMonthOfYear chargingFrom: aMockMerchantProcessor registeringSalesOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOnDate: aGregorianMonthOfYear chargingFrom: aMockMerchantProcessor registeringSalesOn: anOrderedCollection ! !

!methodRemoval: Cashier class #onDate:chargingFrom:registeringSalesOn: stamp: 'SG 6/10/2023 16:58:11'!
onDate: aGregorianMonthOfYear chargingFrom: aMockMerchantProcessor registeringSalesOn: anOrderedCollection 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOnDate: aGregorianMonthOfYear chargingFrom: aMockMerchantProcessor registeringSalesOn: anOrderedCollection !
!Cashier class methodsFor: 'instance creation' stamp: 'SG 6/10/2023 16:58:43'!
onDate: aDate chargingFrom: aMerchantProcessor registeringSalesOn: aSalesBook

	^self new
		initializeOnDate: aDate
		chargingFrom: aMerchantProcessor
		registeringSalesOn: aSalesBook! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 16:58:47'!
ERROR!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 16:58:48'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/10/2023 16:58:52'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate merchantProcessor date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/10/2023 16:58:53'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate merchantProcessor date salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:58:53'!
initializeOnDate: aDate chargingFrom: aMerchantProcessor registeringSalesOn: aSalesBook 
	self shouldBeImplemented.
	date := aDate.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.! !

!methodRemoval: Cashier class #onDate:chargingFrom: stamp: 'SG 6/10/2023 16:59:02'!
onDate: aDate chargingFrom: aMerchantProcessor

	^self new initializeOnDate: aDate chargingFrom: aMerchantProcessor!

!methodRemoval: Cashier #initializeOnDate:chargingFrom:registeringSalesOn: stamp: 'SG 6/10/2023 16:59:19'!
initializeOnDate: aDate chargingFrom: aMerchantProcessor registeringSalesOn: aSalesBook 
	self shouldBeImplemented.
	date := aDate.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.!
!Cashier methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:59:39'!
initializeOnDate: aDate chargingFrom: aMerchantProcessor registeringSalesOn: aSalesBook


	currentDate := aDate.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.! !
!Cashier methodsFor: 'initialization' stamp: 'SG 6/10/2023 16:59:41' prior: 50631292!
initializeOnDate: aDate chargingFrom: aMerchantProcessor registeringSalesOn: aSalesBook

	currentDate := aDate.
	merchantProcessor := aMerchantProcessor.
	salesBook := aSalesBook.! !

!methodRemoval: Cashier #initializeOnDate:chargingFrom: stamp: 'SG 6/10/2023 16:59:42'!
initializeOnDate: aDate chargingFrom: aMerchantProcessor

	currentDate := aDate.
	merchantProcessor := aMerchantProcessor!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'SG 6/10/2023 16:59:52'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate merchantProcessor salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 17:00:28'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 17:00:28'!
FAILURE!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 17:00:28'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'SG 6/10/2023 17:00:47' prior: 50629592!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	merchantProcessor charge: price from: aCreditCard.
	salesBook add: price.
	
	^ price! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 17:00:50'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 17:00:51'!
PASSED!

----SNAPSHOT----(10 June 2023 17:00:59) CuisUniversity-5832.image priorSource: 9461874!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 17:01:34'!
assertWorking

	^ working ifFalse: [ self error: self class outOfServiceErrorDescription ]! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 17:01:34' prior: 50631046 overrides: 50629650!
charge: anAmount from: aCreditCard

	self assertWorking.
	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].

	creditCardCharges add: aCreditCard -> anAmount
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 17:02:20'!
assertCreditCard: aCreditCard hasBalanceOfAtLeast: anAmount

	(balances at: aCreditCard) < anAmount ifTrue: [ self error: self class notEnoughBalanceForTransactionErrorDescription ].
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'SG 6/10/2023 17:02:47' prior: 50631492 overrides: 50629650!
charge: anAmount from: aCreditCard

	self assertWorking.
	self assertCreditCard: aCreditCard hasBalanceOfAtLeast: anAmount.

	creditCardCharges add: aCreditCard -> anAmount
! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'SG 6/10/2023 17:02:52'!
PASSED!

----SNAPSHOT----(10 June 2023 17:03:26) CuisUniversity-5832.image priorSource: 9594611!

----QUIT----(10 June 2023 17:03:39) CuisUniversity-5832.image priorSource: 9598281!

----STARTUP---- (12 June 2023 02:37:21) as /home/sponja/Temp/Cuises/cursada3/CuisUniversity-5832.image!


----End fileIn of /home/sponja/Temp/Cuises/cursada3/TusLibros.st----!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 02:37:57'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 02:49:51'!
PASSED!

Object subclass: #CashierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierBuilder category: 'TusLibros' stamp: 'TS 6/12/2023 03:10:20'!
Object subclass: #CashierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:14:05' prior: 50624553!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.
	
	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:14:07' prior: 50625328!
test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor

	| cart cashier creditCard merchantProcessor price |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	price := cashier checkout: cart withCreditCard: creditCard.

	self assert: (merchantProcessor hasCharged: price from: creditCard)! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:24:06'!
test10CheckoutFailsIfCreditCardWasStolen

	| cart cashier salesBook creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			
		]! !

!classRemoval: #CashierBuilder stamp: 'TS 6/12/2023 03:25:06'!
Object subclass: #CashierBuilder
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!methodRemoval: CashierTest #test10CheckoutFailsIfCreditCardWasStolen stamp: 'TS 6/12/2023 03:25:12'!
test10CheckoutFailsIfCreditCardWasStolen

	| cart cashier salesBook creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.

	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			
		]!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:25:45' prior: 50624474!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := testObjectFactory createCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:25:47'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 03:25:49'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 03:25:49'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:25:59' prior: 50624487!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:26:01' prior: 50625551!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory createCashier.

	self
		assert: testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 03:26:02'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 03:26:02'!
PASSED!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'TS 6/12/2023 03:35:21'!
hasChargedAnyBalance: aCreditCard 

	^ creditCardCharges anySatisfy: [:anAssociation | anAssociation key = aCreditCard ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:35:22' prior: 50624574!
test07CheckoutFailsIfMerchantProcessorIsDown

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasChargedAnyBalance: creditCard)
		]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:35:22' prior: 50624601!
test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance

	| cart cashier creditCard merchantProcessor |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.

	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := MockMerchantProcessor withBalances: { creditCard -> 5 }.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor notEnoughBalanceForTransactionErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasChargedAnyBalance: creditCard)
		]! !

!methodRemoval: MockMerchantProcessor #hasCharged: stamp: 'TS 6/12/2023 03:35:22'!
hasCharged: aCreditCard 

	^ creditCardCharges anySatisfy: [:anAssociation | anAssociation key = aCreditCard ]!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 03:35:23'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 03:35:23'!
PASSED!
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 03:39:31'!
defaultCashier

	^ self createCashierChargingFrom: self defaultMerchantProcessor! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:39:31' prior: 50625565!
test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory defaultCashier.

	self
		assert: testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:39:31' prior: 50624517!
test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory defaultCashier.
	
	self
		assert: testObjectFactory priceOfItemSoldByStore + testObjectFactory priceOfOtherItemSellByTheStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:39:31' prior: 50624535!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory defaultCashier.
	
	self 
		should: [cashier checkout: cart withCreditCard: (testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:39:31' prior: 50625424!
test01CannotCheckoutEmptyCart

	| cart cashier |
	cart :=  testObjectFactory createCart.
	
	cashier := testObjectFactory defaultCashier.
	
	self
		should: [ cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutEmptyCartErrorDescription! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'TS 6/12/2023 03:39:31' prior: 50624501!
test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory itemSellByTheStore.
	
	cashier := testObjectFactory defaultCashier.
	
	self
		assert: 2 * testObjectFactory priceOfItemSoldByStore
		equals: (cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard).! !

!methodRemoval: StoreTestFactory #createCashier stamp: 'TS 6/12/2023 03:39:31'!
createCashier

	^ self createCashierChargingFrom: self defaultMerchantProcessor!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 03:39:36'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 03:39:36'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:53:18' prior: 50625841!
test05CheckoutFailsIfCreditCardHasExpired

	| cart cashier |
	cart :=  testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	cashier := testObjectFactory defaultCashier.
	
	self 
		should: [ cashier checkout: cart withCreditCard: (testObjectFactory createCreditCardThatExpiresOn: testObjectFactory pastDate) ]
		raise: Error - MessageNotUnderstood
		withMessageText: Cashier cantCheckoutUsingExpiredCreditCardErrorDescription! !

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:53:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 03:53:22'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 03:53:22'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 03:59:12'!
test10CheckoutFailsIfCreditCardWasStolen

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price! !

!methodRemoval: CashierTest #test10CheckoutFailsIfCreditCardWasStolen stamp: 'TS 6/12/2023 03:59:31'!
test10CheckoutFailsIfCreditCardWasStolen

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:00:14'!
test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price! !

!methodRemoval: CashierTest #test09CashierRegistersSalesOnSalesBook stamp: 'TS 6/12/2023 04:00:14'!
test09CashierRegistersSalesOnSalesBook

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price!
!Cashier methodsFor: 'checkout' stamp: 'TS 6/12/2023 04:06:04' prior: 50624841!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	salesBook add: price.
	merchantProcessor charge: price from: aCreditCard.
	
	^ price! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:06:12'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 04:06:14'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 04:06:14'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:06:35'!
test10CashierDoesntRegisterSalesBookWhenCheckoutFails

	| cart cashier salesBook price |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	cashier := testObjectFactory createCashierRegisteringSalesOn: salesBook.
	
	price := cashier checkout: cart withCreditCard: testObjectFactory defaultCreditCard.

	self assert: salesBook includes: 	price! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:07:02' prior: 50626298!
test10CashierDoesntRegisterSalesBookWhenCheckoutFails

	| cart cashier salesBook creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor outOfServiceErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasChargedAnyBalance: creditCard)
		]! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:08:05' prior: 50626316!
test10CashierDoesntRegisterSalesBookWhenCheckoutFails

	| cart cashier salesBook creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	salesBook := OrderedCollection new.
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor registeringSalesOn: salesBook.

	merchantProcessor simulateServiceOutage.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: salesBook isEmpty
		]! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:08:13'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:08:13'!
ERROR!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:08:13'!
ERROR!
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:08:18'!
createCashierChargingFrom: merchantProcessor registeringSalesOn: salesBook 
	self shouldBeImplemented.! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:08:21' prior: 50626412!
createCashierChargingFrom: merchantProcessor registeringSalesOn: salesBook 

	! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:09:15' prior: 50626419!
createCashierChargingFrom: merchantProcessor registeringSalesOn: salesBook 

	^ Cashier
		onDate: self currentDate
		chargingFrom: merchantProcessor
		registeringSalesOn: salesBook! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:09:45' prior: 50625179!
createCashierChargingFrom: aMerchantProcessor

	^ self
		createCashierChargingFrom: aMerchantProcessor
		registeringSalesOn: OrderedCollection new! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:10:24' prior: 50625187!
createCashierRegisteringSalesOn: aSalesBook 

	^ self
		createCashierChargingFrom: self defaultMerchantProcessor 
		registeringSalesOn: aSalesBook! !
!StoreTestFactory methodsFor: 'cashier' stamp: 'TS 6/12/2023 04:11:17' prior: 50625801!
defaultCashier

	^ self
		createCashierChargingFrom: self defaultMerchantProcessor 
		registeringSalesOn: OrderedCollection new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:11:28'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 04:11:28'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:11:28'!
FAILURE!
!Cashier methodsFor: 'checkout' stamp: 'TS 6/12/2023 04:11:46' prior: 50626175!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	merchantProcessor charge: price from: aCreditCard.
	
	salesBook add: price.

	^ price! !
!Cashier methodsFor: 'checkout' stamp: 'TS 6/12/2023 04:11:47' prior: 50626542!
checkout: aCart withCreditCard: aCreditCard 

	| price |
	self assertIsValidCart: aCart.
	self assertCreditCardHasNotExpired: aCreditCard.

	price := self calculateTotalPrice: aCart.
	
	merchantProcessor charge: price from: aCreditCard.	
	salesBook add: price.

	^ price! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 04:11:49'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 04:11:50'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 04:11:50'!
PASSED!
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:15:04'!
test11CheckoutFailsIfCreditCardHasBeenStolen

	| cart cashier salesBook creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.
	
	merchantProcessor markAsStolen: creditCard.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor equals: anError messageText.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:15:09' prior: 50626709!
test11CheckoutFailsIfCreditCardHasBeenStolen

	| cart cashier creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.
	
	merchantProcessor markAsStolen: creditCard.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor equals: anError messageText.
		]! !
!CashierTest methodsFor: 'tests' stamp: 'TS 6/12/2023 04:16:53' prior: 50626734!
test11CheckoutFailsIfCreditCardHasBeenStolen

	| cart cashier creditCard merchantProcessor |
	cart := testObjectFactory createCart.
	cart add: testObjectFactory itemSellByTheStore.
	cart add: testObjectFactory otherItemSellByTheStore.
	
	creditCard := testObjectFactory defaultCreditCard.
	merchantProcessor := testObjectFactory defaultMerchantProcessor.
	cashier := testObjectFactory createCashierChargingFrom: merchantProcessor.
	
	merchantProcessor markAsStolen: creditCard.

	self
		should: [ cashier checkout: cart withCreditCard: creditCard ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:anError |
			self assert: MerchantProcessor stolenCreditCardErrorDescription equals: anError messageText.
			self deny: (merchantProcessor hasChargedAnyBalance: creditCard).
		]! !

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:19:30'!
ERROR!
!MockMerchantProcessor methodsFor: 'simulation' stamp: 'TS 6/12/2023 04:19:38'!
markAsStolen: creditCard 
	self shouldBeImplemented.! !

!classDefinition: #MockMerchantProcessor category: 'TusLibros' stamp: 'TS 6/12/2023 04:21:04'!
MerchantProcessor subclass: #MockMerchantProcessor
	instanceVariableNames: 'working creditCardCharges balances stolenCreditCards'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!MockMerchantProcessor methodsFor: 'simulation' stamp: 'TS 6/12/2023 04:21:02' prior: 50626790!
markAsStolen: aCreditCard

	stolenCreditCards add: aCreditCard! !

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:21:04'!
ERROR!
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'TS 6/12/2023 04:21:22' prior: 50625081!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.
	creditCardCharges := OrderedCollection new.
	stolenCreditCards := Set new.! !
!MockMerchantProcessor methodsFor: 'initialization' stamp: 'TS 6/12/2023 04:21:22' prior: 50626813!
initializeWithBalances: aMappingOfCreditCardsToBalances 

	working := true.
	balances := aMappingOfCreditCardsToBalances asDictionary.
	creditCardCharges := OrderedCollection new.
	stolenCreditCards := Set new! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:21:25'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardNumberMustBeAStrictlyPositiveInteger stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardOwnerMustBeANonEmptyString stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardOwnerCantHaveMoreThan30Characters stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardHasntExpiredBeforeExpirationDate stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardHasExpiredAfterExpirationDate stamp: 'TS 6/12/2023 04:21:25'!
PASSED!

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:21:25'!
FAILURE!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'TS 6/12/2023 04:22:17' prior: 50625057 overrides: 50625001!
charge: anAmount from: aCreditCard

	self assertWorking.
	(stolenCreditCards includes: aCreditCard) ifTrue: [ self error: self class ].
	self assertCreditCard: aCreditCard hasBalanceOfAtLeast: anAmount.

	creditCardCharges add: aCreditCard -> anAmount
! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'TS 6/12/2023 04:22:38' prior: 50626922 overrides: 50625001!
charge: anAmount from: aCreditCard

	self assertWorking.
	(stolenCreditCards includes: aCreditCard) ifTrue: [ self error: self class stolenCreditCardErrorDescription ].
	self assertCreditCard: aCreditCard hasBalanceOfAtLeast: anAmount.

	creditCardCharges add: aCreditCard -> anAmount
! !
!MerchantProcessor class methodsFor: 'error descriptions' stamp: 'TS 6/12/2023 04:23:01'!
stolenCreditCardErrorDescription

	^ 'La tarjeta de creÃÅdito fue robada'! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:23:06'!
PASSED!

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:23:06'!
PASSED!
!MockMerchantProcessor methodsFor: 'charging' stamp: 'TS 6/12/2023 04:23:30'!
assertCreditCardNotStolen: aCreditCard

	^ (stolenCreditCards includes: aCreditCard) ifTrue: [ self error: self class stolenCreditCardErrorDescription ]! !
!MockMerchantProcessor methodsFor: 'charging' stamp: 'TS 6/12/2023 04:23:30' prior: 50626934 overrides: 50625001!
charge: anAmount from: aCreditCard

	self assertWorking.
	self assertCreditCardNotStolen: aCreditCard.
	self assertCreditCard: aCreditCard hasBalanceOfAtLeast: anAmount.

	creditCardCharges add: aCreditCard -> anAmount
! !

!testRun: #CashierTest #test01CannotCheckoutEmptyCart stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutPriceOfCartWithSingleItemIsThatItemsPrice stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutPriceOfCartWithMultipleOfTheSameItemIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutPriceOfCartWithMultipleDifferentItemsIsCalculatedCorrectly stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test05CheckoutFailsIfCreditCardHasExpired stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test06CheckoutChargesSaleAmountFromCreditCardUsingMerchantProcessor stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test07CheckoutFailsIfMerchantProcessorIsDown stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test08CheckoutFailsIfCreditCardDoesntHaveEnoughBalance stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test09CashierRegistersSalesOnSalesBookWhenCheckoutIsSuccessful stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test10CashierDoesntRegisterSalesBookWhenCheckoutFails stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

!testRun: #CashierTest #test11CheckoutFailsIfCreditCardHasBeenStolen stamp: 'TS 6/12/2023 04:23:33'!
PASSED!

----SNAPSHOT----(12 June 2023 04:23:39) CuisUniversity-5832.image priorSource: 9366758!

----QUIT----(12 June 2023 04:23:42) CuisUniversity-5832.image priorSource: 9452868!