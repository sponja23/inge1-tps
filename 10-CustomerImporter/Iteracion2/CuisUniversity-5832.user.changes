

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (26 June 2023 19:12:39) as /home/clinux01/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/linux64/CustomerImporter-35.st----!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:16:06' prior: 50624630 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ | customerData newCustomer |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			"newCustomer addAddress: newAddress."
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:16:32'!
readCustomerLine: line

	| customerData newCustomer |
			customerData := line findTokens: $,.
			newCustomer := Customer new.
			newCustomer firstName: customerData second.
			newCustomer lastName: customerData third.
			newCustomer identificationType: customerData fourth.
			newCustomer identificationNumber: customerData fifth.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:16:32' prior: 50624781 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			"newCustomer addAddress: newAddress."
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:16:45' prior: 50624828 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			"newCustomer addAddress: newAddress."
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:16:53' prior: 50624852 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ | addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:17:02' prior: 50624813!
readCustomerLine: line

	| customerData newCustomer |

	customerData := line findTokens: $,.
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:08'!
readAddressLine: newCustomer belongingTo: line

	| addressData newAddress |
			addressData := line findTokens: $,.
			newAddress := Address new.
			newCustomer addAddress: newAddress.
			newAddress streetName: addressData second.
			newAddress streetNumber: addressData third asNumber .
			newAddress town: addressData fourth.
			newAddress zipCode: addressData fifth asNumber .
			newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:08' prior: 50624876 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ self readAddressLine: newCustomer belongingTo: line ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:19' prior: 50624931 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ self readAddressLine: line belongingTo: newCustomer ].

		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:20' prior: 50624945 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].

		(line beginsWith: 'A') ifTrue: [ self readAddressLine: line belongingTo: newCustomer ].
		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:21' prior: 50624959 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].
		(line beginsWith: 'A') ifTrue: [ self readAddressLine: line belongingTo: newCustomer ].
		line := readStream nextLine. ].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:18:24' prior: 50624973 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [ newCustomer := self readCustomerLine: line ].
		(line beginsWith: 'A') ifTrue: [ self readAddressLine: line belongingTo: newCustomer ].
		line := readStream nextLine.
	].

	! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:08' prior: 50624914!
readAddressLine: newCustomer belongingTo: line

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber .
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:09' prior: 50625001!
readAddressLine: newCustomer belongingTo: line

	| addressData newAddress |
	addressData := line findTokens: $,.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:41'!
splitLineIntoTokens: line

	^ line findTokens: $,! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:41' prior: 50625017!
readAddressLine: newCustomer belongingTo: line

	| addressData newAddress |
	addressData := self splitLineIntoTokens: line.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:41' prior: 50624900!
readCustomerLine: line

	| customerData newCustomer |

	customerData := self splitLineIntoTokens: line.
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:53' prior: 50625038!
readAddressLine: line belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: line.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:19:56' prior: 50625070!
readAddressLine: aLine belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	newAddress := Address new.
	newCustomer addAddress: newAddress.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:20:16' prior: 50625087!
readAddressLine: aLine belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:21:07' prior: 50624987 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line belongingTo: newCustomer.
			newCustomer addAddress: newAddress.
		].
		line := readStream nextLine.
	].

	! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:21:21' prior: 50625055!
readCustomerLine: line

	| customerData newCustomer |

	customerData := self splitLineIntoTokens: line.
	
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.
	
	^ newCustomer! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:21:21' prior: 50625137!
readCustomerLine: line

	| customerData newCustomer |

	customerData := self splitLineIntoTokens: line.
	
	newCustomer := Customer new.
	newCustomer firstName: customerData second.
	newCustomer lastName: customerData third.
	newCustomer identificationType: customerData fourth.
	newCustomer identificationNumber: customerData fifth.

	^ newCustomer! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:21:32' prior: 50625104!
readAddressLine: aLine belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth.
	! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:21:39' prior: 50625166!
readAddressLine: aLine belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth.
	
	^ newAddress! !

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:21:42'!
PASSED!
!CustomerImporter methodsFor: 'initialization' stamp: 'SG 6/26/2023 19:25:37' prior: 50624624!
initializeFrom: aReadStream into: aSession

	readStream := aReadStream.	
	session := aSession.! !
!CustomerImporter methodsFor: 'initialization' stamp: 'SG 6/26/2023 19:25:38' prior: 50625200!
initializeFrom: aReadStream into: aSession

	readStream := aReadStream.	
	session := aSession.! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:25:54'!
readAddressLine: aLine 

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth.
	
	^ newAddress! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 19:25:54' prior: 50625120 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line .
			newCustomer addAddress: newAddress.
		].
		line := readStream nextLine.
	].

	! !

!methodRemoval: CustomerImporter #readAddressLine:belongingTo: stamp: 'SG 6/26/2023 19:25:54'!
readAddressLine: aLine belongingTo: newCustomer

	| addressData newAddress |
	addressData := self splitLineIntoTokens: aLine.
	
	newAddress := Address new.
	newAddress streetName: addressData second.
	newAddress streetNumber: addressData third asNumber.
	newAddress town: addressData fourth.
	newAddress zipCode: addressData fifth asNumber.
	newAddress province: addressData sixth.
	
	^ newAddress!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:26:05' prior: 50625229 overrides: 16902254!
value

	"
	self importCustomers
	"
	| line newCustomer |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		(line beginsWith: 'C') ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
		line := readStream nextLine.
	].

	! !

stream := ReadStream on: 'hola', String crlfString, 'sofi'.!

stream!

collection := OrderedCollection new.!

stream do: [:aLine | collection add: aLine]!

collection!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:31:52'!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		aBlock value: line
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:31:55' prior: 50625283!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		aBlock value: line
	].

! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:31:56' prior: 50625290!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		aBlock value: line
	].! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:32:39' prior: 50625262 overrides: 16902254!
value

	| newCustomer |
	self onLinesDo: [:line |
		(line beginsWith: 'C') ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].

	! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:32:55' prior: 50625297!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		aBlock value: line.
		readStream nextLine
	].! !

----STARTUP---- (26 June 2023 19:33:35) as /home/clinux01/linux64/CuisUniversity-5832.image!


----End fileIn of /home/clinux01/linux64/CustomerImporter.st----!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:34:17' prior: 50624630!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line notNil ] whileTrue: [
		aBlock value: line.
		line := readStream nextLine
	].! !

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:34:20'!
PASSED!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:35:19' prior: 50624803!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	line whileNotNil: [
		aBlock value: line.
		line := readStream nextLine
	].! !

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:35:21'!
ERROR!

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:35:21'!
ERROR!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:35:35' prior: 50624814!
onLinesDo: aBlock

	| line |

	line := readStream nextLine.
	[ line ] whileNotNil: [
		aBlock value: line.
		line := readStream nextLine
	].! !

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:35:36'!
PASSED!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:35:52' prior: 50624827!
onLinesDo: aBlock

	| line |

	[ line := readStream nextLine ] whileNotNil: [
		aBlock value: line
	].! !

----SNAPSHOT----(26 June 2023 19:36:03) CuisUniversity-5832.image priorSource: 9366758!

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:36:05'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:41:11'!
isCustomerLine: line

	^ line beginsWith: 'C'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:41:11' prior: 50624671 overrides: 16902254!
value

	| newCustomer |
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(line beginsWith: 'A') ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:41:22'!
isAddressLine: line

	^ line beginsWith: 'A'! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:41:22' prior: 50624853 overrides: 16902254!
value

	| newCustomer |
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].

	! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:41:25' prior: 50624871 overrides: 16902254!
value

	| newCustomer |
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !

!testRun: #ImportTest #test01Import stamp: 'SG 6/26/2023 19:41:28'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 19:41:50'!
test01ValidCustomersAreImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!methodRemoval: ImportTest #test01Import stamp: 'SG 6/26/2023 19:41:50'!
test01Import

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:56:21' prior: 50624652!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 19:57:25' prior: 50624885 overrides: 16902254!
value

	 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'SG 6/26/2023 19:57:25'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:57:29' prior: 50624935 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			newCustomer := self readCustomerLine: line.
			session persist: newCustomer.
		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:57:39'!
readCustomerIntoSession: line

	newCustomer := self readCustomerLine: line.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:57:39' prior: 50624957 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [
			self readCustomerIntoSession: line.
		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:57:48' prior: 50624977 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSession: line		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:57:53'!
readCustomerIntoSessionFrom: line

	newCustomer := self readCustomerLine: line.
			session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 19:57:53' prior: 50624989 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSessionFrom: line		].
		(self isAddressLine: line) ifTrue: [ | newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress.
		].
	].
! !

!methodRemoval: CustomerImporter #readCustomerIntoSession: stamp: 'SG 6/26/2023 19:57:53'!
readCustomerIntoSession: line

	newCustomer := self readCustomerLine: line.
			session persist: newCustomer!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:58:11' prior: 50624637!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:58:31'!
readAddressIntoSessionFrom: line

	| newAddress |
			newAddress := self readAddressLine: line.
			newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:58:31' prior: 50625008 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSessionFrom: line		].
		(self isAddressLine: line) ifTrue: [ self readAddressIntoSessionFrom: line.
		].
	].
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:58:41' prior: 50625000!
readCustomerIntoSessionFrom: line

	newCustomer := self readCustomerLine: line.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:58:45' prior: 50625058!
readCustomerIntoSessionFrom: aLine

	newCustomer := self readCustomerLine: aLine.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:58:57' prior: 50625040!
readAddressIntoSessionFrom: aLine

	| newAddress |
	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:59:05' prior: 50625072!
readAddressIntoSessionFrom: aLine

	| newAddress |

	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 19:59:21' prior: 50625048 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSessionFrom: line		].
		(self isAddressLine: line) ifTrue: [ self readAddressIntoSessionFrom: line ].
	].
! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:59:35' prior: 50624866!
isAddressLine: aLine

	^ aLine beginsWith: 'A'! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 19:59:40' prior: 50624848!
isCustomerLine: aLine

	^ aLine beginsWith: 'C'! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:00:20'!
PASSED!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:08:26'!
readStreamWithLines: aCollectionOfLines

	^ ReadStream on: (
		aCollectionOfLines
			inject: String new
			into: [:previousLines :newLine | previousLines, String crlfString, newLine ]
	)! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:09:38' prior: 50624482!
validImportData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:09:41'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:10:04'!
test02InvalidLineTypeRaisesError

	CustomerImporter valueFrom: self validImportData into: session..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:11:02' prior: 50625132!
test02InvalidLineTypeRaisesError

	CustomerImporter
		valueFrom: (self readStreamWithLines: { 'X, a, b, c'. 'Y, d, e, f' })
		into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:12:13' prior: 50625142!
test02InvalidLineTypeRaisesError

	| importer |
	importer := CustomerImporter
		from: (self readStreamWithLines: { 'X, a, b, c'. 'Y, d, e, f' })
		into: session.
		
	self
		should: [ importer value ]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription
! !

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:12:16'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 20:12:26'!
invalidLineTypeErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 20:12:42' prior: 50625169!
invalidLineTypeErrorDescription

	^ 'La línea tiene un tipo inválido'! !

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:12:42'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:14:24' prior: 50625088 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSessionFrom: line		].
		(self isAddressLine: line) ifTrue: [ self readAddressIntoSessionFrom: line ].
		(#($C $A) includes: line first) ifFalse: [ self error: self class invalidLineTypeErrorDescription ]
	].
! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:14:26'!
ERROR!

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:14:26'!
FAILURE!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:14:27'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:14:52' prior: 50625154!
test02InvalidLineTypeRaisesError

	| importer |
	importer := CustomerImporter
		from: (self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' })
		into: session.
		
	self
		should: [ importer value ]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:14:54' prior: 50625206!
test02InvalidLineTypeRaisesError

	| importer |
	importer := CustomerImporter
		from: (self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' })
		into: session.

	self
		should: [ importer value ]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription
! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:14:55'!
ERROR!

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:14:55'!
FAILURE!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:14:57'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:15:59' prior: 50625110!
readStreamWithLines: aCollectionOfLines

	^ ReadStream on: (
		aCollectionOfLines allButFirst
			inject: aCollectionOfLines first
			into: [:previousLines :newLine | previousLines, String crlfString, newLine ]
	)! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:16:03'!
PASSED!

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:16:03'!
PASSED!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:18:00'!
readLine: line

	(self isCustomerLine: line) ifTrue: [ self readCustomerIntoSessionFrom: line		].
		(self isAddressLine: line) ifTrue: [ self readAddressIntoSessionFrom: line ].
		(#($C $A) includes: line first) ifFalse: [ self error: self class invalidLineTypeErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:18:00' prior: 50625184 overrides: 16902254!
value
 
	self onLinesDo: [:line |
		self readLine: line
	].
! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:20:02' prior: 50625255!
readLine: aLine

	(self isCustomerLine: aLine) ifTrue: [ self readCustomerIntoSessionFrom: aLine. ^self ].
	(self isAddressLine: aLine) ifTrue: [ self readAddressIntoSessionFrom: aLine. ^self ].
	self error: self class invalidLineTypeErrorDescription
	! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:20:04'!
PASSED!

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:20:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:20:38' prior: 50625218!
test02InvalidLineTypeRaisesError

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:20:51' prior: 50625290!
test02InvalidLineTypeRaisesError

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { '' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:20:55' prior: 50625301!
test02InvalidLineTypeRaisesError

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { ''. '' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:20:56'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:20:57'!
PASSED!

!testRun: #ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:20:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:22:25'!
invalidImportWithInvalidLineTypes

	^ self readStreamWithLines: { 'X,a,b,c'. 'Y,d,e,f' }! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:22:25' prior: 50625318!
test02InvalidLineTypeRaisesError

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithInvalidLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self readStreamWithLines: { ''. '' })
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:22:41'!
invalidImportWithEmptyLineTypes

	^ self readStreamWithLines: { ''. '' }! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:22:41' prior: 50625350!
test02InvalidLineTypeRaisesError

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithInvalidLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:23:56'!
assertImporterCustomersFrom

	^ self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithInvalidLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:23:56' prior: 50625371!
test02InvalidLineTypeRaisesError

	self assertImporterCustomersFrom.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:24:52'!
assertImporterCustomersFrom: aReadStream

	^ self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithInvalidLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:24:52' prior: 50625397!
test02InvalidLineTypeRaisesError

	self assertImporterCustomersFrom: self invalidImportWithInvalidLineTypes.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !

!methodRemoval: ImportTest #assertImporterCustomersFrom stamp: 'SG 6/26/2023 20:24:52'!
assertImporterCustomersFrom

	^ self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithInvalidLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:24:59' prior: 50625408!
assertImporterCustomersFrom: aReadStream

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:25:10'!
assertImportingCustomersFrom: aReadStream

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:25:10' prior: 50625419!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !

!methodRemoval: ImportTest #assertImporterCustomersFrom: stamp: 'SG 6/26/2023 20:25:10'!
assertImporterCustomersFrom: aReadStream

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:25:35'!
assertImportingCustomersFrom: aReadStream raisesErrorWithDescription: anErrorDescription 

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:25:35' prior: 50625461!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !

!methodRemoval: ImportTest #assertImportingCustomersFrom: stamp: 'SG 6/26/2023 20:25:35'!
assertImportingCustomersFrom: aReadStream

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:25:35' prior: 50625483!
assertImportingCustomersFrom: aReadStream raisesErrorWithDescription: anErrorDescription 

	^ self
		should: [
			CustomerImporter
				valueFrom: aReadStream
				into: session.
		]
		raise: Error
		withMessageText: anErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:25:51' prior: 50625520!
assertImportingCustomersFrom: aReadStream raisesErrorWithDescription: anErrorDescription 

	^ self
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withMessageText: anErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:27:51' prior: 50625495!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.

	self
		should: [
			CustomerImporter
				valueFrom: (self invalidImportWithEmptyLineTypes)
				into: session.
		]
		raise: Error
		withMessageText: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:27:55' prior: 50625540!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:28:01' prior: 50625560!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:39:52'!
test02EmptyLineRaisesError

	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:39:54'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 20:40:01'!
emptyLineErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 20:40:16' prior: 50625599!
emptyLineErrorDescription

	^ 'La entrada contiene líneas vacías'! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:40:16'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:40:27'!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !

!methodRemoval: ImportTest #test02InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:40:27'!
test02InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportWithEmptyLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:40:32' prior: 50625613!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:40:33' prior: 50625640!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineTypes raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:40:48'!
invalidImportWithEmptyLines

	^ self readStreamWithLines: { ''. '' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:40:48' prior: 50625587!
test02EmptyLineRaisesError

	self assertImportingCustomersFrom: self invalidImportWithEmptyLines raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription! !

!methodRemoval: ImportTest #invalidImportWithEmptyLineTypes stamp: 'SG 6/26/2023 20:40:48'!
invalidImportWithEmptyLineTypes

	^ self readStreamWithLines: { ''. '' }!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:41:36' prior: 50625344!
invalidImportWithInvalidLineTypes

	^ self readStreamWithLines: { 'X,a,b,c' }! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:41:41'!
invalidImportWithInvalidLineType

	^ self readStreamWithLines: { 'X,a,b,c' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:41:41' prior: 50625649!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineType raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !

!methodRemoval: ImportTest #invalidImportWithInvalidLineTypes stamp: 'SG 6/26/2023 20:41:41'!
invalidImportWithInvalidLineTypes

	^ self readStreamWithLines: { 'X,a,b,c' }!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:42:01' prior: 50625273!
readLine: aLine

	(self isCustomerLine: aLine) ifTrue: [ self readCustomerIntoSessionFrom: aLine. ^self ].
	(self isAddressLine: aLine) ifTrue: [ self readAddressIntoSessionFrom: aLine. ^self ].
	self error: self class invalidLineTypeErrorDescription! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/26/2023 20:43:11' prior: 50625704!
readLine: aLine

	self assertLineIsNotEmpty: aLine.
	(self isCustomerLine: aLine) ifTrue: [ self readCustomerIntoSessionFrom: aLine. ^self ].
	(self isAddressLine: aLine) ifTrue: [ self readAddressIntoSessionFrom: aLine. ^self ].
	self error: self class invalidLineTypeErrorDescription! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:43:14'!
ERROR!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:43:14'!
FAILURE!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:43:14'!
FAILURE!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:43:16'!
ERROR!
!CustomerImporter methodsFor: 'validation' stamp: 'SG 6/26/2023 20:43:23'!
assertLineIsNotEmpty: aLine 
	self shouldBeImplemented.! !
!CustomerImporter methodsFor: 'validation' stamp: 'SG 6/26/2023 20:43:40' prior: 50625739!
assertLineIsNotEmpty: aLine 

	aLine isEmpty ifTrue: [ self error: self class emptyLineErrorDescription ]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:43:42'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:43:45'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:43:46'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:43:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:45:13' prior: 50625689!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineType raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidDataWithInvalidLineType2 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:45:27'!
invalidImportWithInvalidLineType1

	^ self readStreamWithLines: { 'X,a,b,c' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:45:27' prior: 50625763!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportWithInvalidLineType1 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidDataWithInvalidLineType2 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !

!methodRemoval: ImportTest #invalidImportWithInvalidLineType stamp: 'SG 6/26/2023 20:45:27'!
invalidImportWithInvalidLineType

	^ self readStreamWithLines: { 'X,a,b,c' }!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:45:36'!
invalidImportDataWithEmptyLines

	^ self readStreamWithLines: { ''. '' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:45:36' prior: 50625664!
test02EmptyLineRaisesError

	self assertImportingCustomersFrom: self invalidImportDataWithEmptyLines raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription! !

!methodRemoval: ImportTest #invalidImportWithEmptyLines stamp: 'SG 6/26/2023 20:45:36'!
invalidImportWithEmptyLines

	^ self readStreamWithLines: { ''. '' }!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:45:40'!
invalidImportDataWithInvalidLineType1

	^ self readStreamWithLines: { 'X,a,b,c' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 20:45:40' prior: 50625782!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType1 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidDataWithInvalidLineType2 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !

!methodRemoval: ImportTest #invalidImportWithInvalidLineType1 stamp: 'SG 6/26/2023 20:45:40'!
invalidImportWithInvalidLineType1

	^ self readStreamWithLines: { 'X,a,b,c' }!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:45:52' prior: 50625826!
test03InvalidLineTypeRaisesError

	self assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType1 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType2 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:45:54'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:45:58'!
invalidImportDataWithInvalidLineType2
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 20:46:21' prior: 50625862!
invalidImportDataWithInvalidLineType2

	^ self readStreamWithLines: { 'Customer,x,y,z' }! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:46:23'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 20:46:57' prior: 50625098!
isAddressLine: aLine

	^ aLine first = $A! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 20:47:06' prior: 50625103!
isCustomerLine: aLine

	^ aLine first = 'A'! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:47:07'!
ERROR!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:47:07'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:47:07'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:47:07'!
ERROR!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 20:47:20' prior: 50625881!
isCustomerLine: aLine

	^ aLine first = $C! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:47:21'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:47:22'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:47:22'!
FAILURE!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:47:22'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 20:47:54' prior: 50625898!
isCustomerLine: aLine

	^ aLine beginsWith: 'C,'! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 20:48:01' prior: 50625876!
isAddressLine: aLine

	^ aLine beginsWith: 'A,'! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:48:02'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:48:03'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:48:03'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:48:14' prior: 50625845!
test03InvalidLineTypeRaisesError

	self
		assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType1
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType2 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:48:19' prior: 50625934!
test03InvalidLineTypeRaisesError

	self
		assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType1
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription.
	self
		assertImportingCustomersFrom: self invalidImportDataWithInvalidLineType2
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:48:25' prior: 50625807!
test02EmptyLineRaisesError

	self
		assertImportingCustomersFrom: self invalidImportDataWithEmptyLines
		raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:48:28'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 20:48:28'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 20:48:28'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 20:48:28'!
PASSED!

----SNAPSHOT----(26 June 2023 20:48:41) CuisUniversity-5832.image priorSource: 9382153!

----SNAPSHOT----(26 June 2023 20:49:37) CuisUniversity-5832.image priorSource: 9418610!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:51:25'!
test04! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:53:01' prior: 50625988!
test04! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:54:34' prior: 50625991!
test04

	CustomerImporter valueFrom: '' into: session! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:55:34' prior: 50625994!
test04
	
	
	self readStreamWithLines: { ''. '' }.
	CustomerImporter valueFrom: '' into: session! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:56:11' prior: 50625999!
test04
	
	
	self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	CustomerImporter valueFrom: '' into: session! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:56:40' prior: 50626005!
test04
	

	| readStream |
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	CustomerImporter valueFrom: '' into: session.! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:57:04' prior: 50626016!
test04
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	CustomerImporter valueFrom: readStream into: session.! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 20:57:19' prior: 50626028!
test04
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	CustomerImporter valueFrom: readStream into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

!testRun: #ImportTest #test04 stamp: 'SG 6/26/2023 20:57:20'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:01:17'!
test04CantImportCustomerWithoutAllTheCustomerData
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	CustomerImporter valueFrom: readStream into: session.
! !

!methodRemoval: ImportTest #test04 stamp: 'SG 6/26/2023 21:01:21'!
test04
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	CustomerImporter valueFrom: readStream into: session.
	
	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:02:30' prior: 50626058!
test04CantImportCustomerWithoutAllTheCustomerData
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !

----SNAPSHOT----(26 June 2023 21:02:35) CuisUniversity-5832.image priorSource: 9418699!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:02:41'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:02:47'!
missingDataErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:03:11' prior: 50626110!
missingDataErrorDescription
	
	^ 'Faltan datos del cliente'! !

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:03:11'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:05:45' prior: 50624920!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:05:47'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:05:47'!
PASSED!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:06:40'!
assertImportingAllDataNeeded: customerData

	^ (customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ]! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:06:40' prior: 50626125!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	self assertImportingAllDataNeeded: customerData.
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:06:43'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:06:44'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:06:44'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:06:44'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:07:29'!
invalidImportedDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:07:29' prior: 50626087!
test04CantImportCustomerWithoutAllTheCustomerData
	
	| readStream |
	
	readStream := self invalidImportedDataWithMissingData.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:07:48'!
invalidImportDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:07:48' prior: 50626200!
test04CantImportCustomerWithoutAllTheCustomerData
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !

!methodRemoval: ImportTest #invalidImportedDataWithMissingData stamp: 'SG 6/26/2023 21:07:48'!
invalidImportedDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:07:51'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:07:51'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:07:51'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:07:51'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:08:31'!
test05CantImportCustomerWithoutMoreDataThanNeeded
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:09:37' prior: 50626256!
test05CantImportCustomerWithoutMoreDataThanNeeded
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444,646,hola'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:09:53' prior: 50626267!
test05CantImportCustomerWithoutMoreDataThanNeeded
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444,646,hola'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter extraDataErrorDescription! !

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:09:56'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:10:01'!
extraDataErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:10:56' prior: 50626304!
extraDataErrorDescription
	
	^ 'No se puede importar un cliente con datos no requeridos'! !

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:10:57'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:11:43' prior: 50626154!
assertImportingAllDataNeeded: customerData

	^ (customerData size = 5) ifFalse: [self error: self class missingDataErrorDescription ]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:11:44'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:11:44'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:11:44'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:11:44'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:11:44'!
FAILURE!

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:11:44'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:12:24' prior: 50626320!
assertImportingAllDataNeeded: customerData

	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	(customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:12:26'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:12:27'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:12:27'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:12:27'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:12:27'!
PASSED!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:13:19'!
assertImportingAllCustomerFields: customerData

	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	(customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:13:19' prior: 50626162!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	self assertImportingAllCustomerFields: customerData.
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !

!methodRemoval: CustomerImporter #assertImportingAllDataNeeded: stamp: 'SG 6/26/2023 21:13:19'!
assertImportingAllDataNeeded: customerData

	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	(customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:13:45'!
assertImportingOnlyCustomerFields: customerData

	^ (customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:13:45' prior: 50626374!
assertImportingAllCustomerFields: customerData

	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	self assertImportingOnlyCustomerFields: customerData! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:13:49' prior: 50626418!
assertImportingAllCustomerFields: customerData

	(customerData size < 5) ifTrue: [self error: self class missingDataErrorDescription ].
	! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:13:57' prior: 50626385!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	self assertImportingAllCustomerFields: customerData.
	self assertImportingOnlyCustomerFields: customerData.
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:13:59'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:15:19'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:15:19'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:15:19'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:15:19'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:15:19'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:15:48'!
test04CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !

!methodRemoval: ImportTest #test04CantImportCustomerWithoutAllTheCustomerData stamp: 'SG 6/26/2023 21:15:48'!
test04CantImportCustomerWithoutAllTheCustomerData
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:16:02'!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444,646,hola'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter extraDataErrorDescription! !

!methodRemoval: ImportTest #test05CantImportCustomerWithoutMoreDataThanNeeded stamp: 'SG 6/26/2023 21:16:02'!
test05CantImportCustomerWithoutMoreDataThanNeeded
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444,646,hola'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter extraDataErrorDescription!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:16:09'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:16:09'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:16:09'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:16:09'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:16:09'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:16:09'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:16:59'!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444,646,hola'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter extraDataErrorDescription! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:17:17' prior: 50626559!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter extraDataErrorDescription! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:17:18'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:17:25' prior: 50626575!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:17:26'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:24:01' prior: 50626485!
test04CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			anError = CustomerImporter missingDataErrorDescription 
			and: [  ]
			
		].
	! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:24:39' prior: 50626211!
invalidImportDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !

----SNAPSHOT----(26 June 2023 21:24:45) CuisUniversity-5832.image priorSource: 9422461!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:24:52' prior: 50626626!
invalidImportDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:24:54'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:24:55'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:24:55'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:24:55'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:24:55'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:24:55'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:24:55'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:28:37' prior: 50626613!
test04CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:28:39'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:28:39'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:28:40'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:28:40'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:28:40'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:28:40'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:28:40'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:28:40'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:30:20'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:31:37' prior: 50626507!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:31:38'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:31:39'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:31:39'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:31:39'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:31:40'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:31:40'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:31:40'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:31:40'!
FAILURE!

!methodRemoval: ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:31:49'!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	
	self
		assertImportingCustomersFrom: readStream
		raisesErrorWithDescription: CustomerImporter missingDataErrorDescription!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:32:17'!
invalidImportWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:32:17' prior: 50626718!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:32:36'!
invalidImportDataWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:32:36' prior: 50626792!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #invalidImportWithExtraData stamp: 'SG 6/26/2023 21:32:36'!
invalidImportWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:32:58'!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingData.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:33:38' prior: 50626842!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

----SNAPSHOT----(26 June 2023 21:33:44) CuisUniversity-5832.image priorSource: 9439545!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:34:01' prior: 50626857!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:34:03' prior: 50626880!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:34:16' prior: 50626900!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:34:19'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:34:25'!
missingAddressDataErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:34:44' prior: 50626944!
missingAddressDataErrorDescription
	
	^ 'Faltan datos de la dirección del cliente'! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:34:45'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:35:32' prior: 50625026!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	(addressData size < 6) ifTrue: [self error: self class missingAddressDataErrorDescription ].
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:35:33'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:35:34'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:35:34'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:35:34'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:35:34'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:35:35'!
PASSED!
!CustomerImporter methodsFor: 'validation' stamp: 'SG 6/26/2023 21:36:09'!
assertImportingOnlyValidCustomerFields: customerData

	^ (customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:36:09' prior: 50626436!
readCustomerLine: line

	| customerData customer |

	customerData := self splitLineIntoTokens: line.
	
	self assertImportingAllCustomerFields: customerData.
	self assertImportingOnlyValidCustomerFields: customerData.
	
	customer := Customer new.
	customer firstName: customerData second.
	customer lastName: customerData third.
	customer identificationType: customerData fourth.
	customer identificationNumber: customerData fifth.

	^ customer! !

!methodRemoval: CustomerImporter #assertImportingOnlyCustomerFields: stamp: 'SG 6/26/2023 21:36:09'!
assertImportingOnlyCustomerFields: customerData

	^ (customerData size > 5) ifTrue: [self error: self class extraDataErrorDescription ]!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:37:03'!
assertImportingAllAddressFields: addressData

	^ (addressData size < 6) ifTrue: [self error: self class missingAddressDataErrorDescription ]! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:37:03' prior: 50626960!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

----SNAPSHOT----(26 June 2023 21:37:21) CuisUniversity-5832.image priorSource: 9447249!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:37:59'!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:38:29' prior: 50627054!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,5155,CABA'
	}.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:38:30'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:38:56'!
FAILURE!

!methodRemoval: ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:39:26'!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,1001,5155,CABA'
	}.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:39:46'!
test06CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:39:50'!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #test06CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:39:53'!
test06CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:40:13'!
test06CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:40:13'!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:41:20'!
invalidImportCustomerDataWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:41:20' prior: 50626817!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportCustomerDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:41:20' prior: 50627131!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportCustomerDataWithExtraData.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #invalidImportDataWithExtraData stamp: 'SG 6/26/2023 21:41:20'!
invalidImportDataWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:41:34'!
invalidImportDataWithExtraCustomerFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:41:34' prior: 50627214!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraCustomerFields.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:41:34' prior: 50627230!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraCustomerFields.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #invalidImportCustomerDataWithExtraData stamp: 'SG 6/26/2023 21:41:34'!
invalidImportCustomerDataWithExtraData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9,134'.
		'A,Alem,1122,CABA,1001,CABA'
	}!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:41:55'!
invalidImportDataWithMissingCustomerFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C'.
		'A,Alem,1122,CABA,1001,CABA'
	}! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:41:55' prior: 50626673!
test04CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingCustomerFields.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #invalidImportDataWithMissingData stamp: 'SG 6/26/2023 21:41:55'!
invalidImportDataWithMissingData

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C'.
		'A,Alem,1122,CABA,1001,CABA'
	}!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:42:18'!
invalidImportDataWithExtraAddressFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,244,1001,CABA'
	}! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/26/2023 21:42:57'!
invalidImportDataWithMissingAddressFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,1636,BsAs'.
		'A,Maipu,888,Florida,1122,Buenos Aires'.
		'C,Juan,Perez,C,23-25666777-9'.
		'A,Alem,1122,CABA,CABA'
	}! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:42:58'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:42:59'!
PASSED!

!testRun: #ImportTest #test06CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:43:00'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:43:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:43:21' prior: 50627161!
test06CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingAddressFields.

	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test06CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:43:23'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:43:23'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:43:24'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:43:24'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:43:24'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:43:24'!
PASSED!

!testRun: #ImportTest #test06CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:43:25'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:43:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:44:05'!
test06CantImportAddressWithLessThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingAddressFields.

	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: ImportTest #test06CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:44:05'!
test06CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingAddressFields.

	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:44:09'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:44:10'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:44:10'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:44:10'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:44:10'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:44:11'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:44:11'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:44:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:44:23' prior: 50627284!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraCustomerFields.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:44:26'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:44:31'!
extraAddressDataErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:44:53' prior: 50627510!
extraAddressDataErrorDescription
	
	^ 'Las direcciones no pueden tener más de cinco campos'! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:44:54'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:46:06' prior: 50627036!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	(addressData > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ].
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:46:07'!
ERROR!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:46:07'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:46:07'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:46:07'!
FAILURE!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:46:07'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:46:07'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:46:07'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:46:27' prior: 50627526!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	"(addressData > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ]."
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:46:29'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:46:29'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:46:29'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:46:29'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:46:29'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:46:30'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:46:30'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:46:31'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:46:55'!
FAILURE!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:47:10' prior: 50627516!
extraAddressDataErrorDescription
	
	^ 'Las direcciones no pueden tener más de seis campos'! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:47:34'!
extraCustomerDataErrorDescription
	
	^ 'No se puede importar un cliente con datos no requeridos'! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:47:34' prior: 50626996!
assertImportingOnlyValidCustomerFields: customerData

	^ (customerData size > 5) ifTrue: [self error: self class extraCustomerDataErrorDescription ]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:47:34' prior: 50627268!
test05CantImportCustomerWithMoreThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraCustomerFields.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraCustomerDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!methodRemoval: CustomerImporter class #extraDataErrorDescription stamp: 'SG 6/26/2023 21:47:34'!
extraDataErrorDescription
	
	^ 'No se puede importar un cliente con datos no requeridos'!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:47:40'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:47:41'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:47:41'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:47:42'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:47:42'!
FAILURE!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:48:07' prior: 50627623!
extraCustomerDataErrorDescription
	
	^ 'Los clientes no pueden tener más de cinco campos'! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/26/2023 21:48:19'!
missingCustomerDataErrorDescription
	
	^ 'Faltan datos del cliente'! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:48:19' prior: 50627321!
test04CantImportCustomerWithLessThanFiveFields
	
	| readStream |
	
	readStream := self invalidImportDataWithMissingCustomerFields.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingCustomerDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/26/2023 21:48:19' prior: 50626428!
assertImportingAllCustomerFields: customerData

	(customerData size < 5) ifTrue: [self error: self class missingCustomerDataErrorDescription ].
	! !

!methodRemoval: CustomerImporter class #missingDataErrorDescription stamp: 'SG 6/26/2023 21:48:19'!
missingDataErrorDescription
	
	^ 'Faltan datos del cliente'!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:48:22'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:48:22'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:48:22'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:48:22'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:48:22'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:48:23'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:48:23'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:48:24'!
FAILURE!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/26/2023 21:48:40' prior: 50627568!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	(addressData size > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ].
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:48:41'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:48:41'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:48:41'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:48:42'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:48:42'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:48:43'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:48:43'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:48:43'!
FAILURE!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:49:16'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:49:17'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:49:17'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:49:17'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:49:17'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:49:18'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:49:18'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:49:19'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:49:19'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/26/2023 21:49:53' prior: 50627491!
test07CantImportAddressWithMoreThanSixFields
	
	| readStream |
	
	readStream := self invalidImportDataWithExtraAddressFields.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:49:54'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/26/2023 21:49:55'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/26/2023 21:49:55'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/26/2023 21:49:55'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/26/2023 21:49:55'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/26/2023 21:49:56'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/26/2023 21:49:56'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/26/2023 21:49:57'!
PASSED!

----SNAPSHOT----(26 June 2023 21:50:04) CuisUniversity-5832.image priorSource: 9452822!

----STARTUP---- (28 June 2023 16:24:34) as /home/sofia/Downloads/linux64/linux64/CuisUniversity-5832.image!


----SNAPSHOT----(28 June 2023 16:25:07) CuisUniversity-5832.image priorSource: 9366758!

----End fileIn of /home/sofia/Downloads/linux64/linux64/CustomerImporter.st----!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:37:09' prior: 50624392!
test02EmptyLineRaisesError

		| readStream |
	readStream := self invalidImportDataWithEmptyLines.
	 
		self 
			should: [ CustomerImporter valueFrom: readStream into: session ]
			raise: Error
			withExceptionDo: [:anError |
				self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
				self assertPepeSanchezWasImportedCorrecty.
			].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:37:33' prior: 50625064!
test02EmptyLineRaisesError

	| readStream |
	
	readStream := self invalidImportDataWithEmptyLines.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self .
		].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:39:05' prior: 50625079!
test02EmptyLineRaisesError

	| readStream |
	
	readStream := self invalidImportDataWithEmptyLines.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer).
		].! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:39:06'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:39:14' prior: 50625092!
test02EmptyLineRaisesError

	| readStream |
	
	readStream := self invalidImportDataWithEmptyLines.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:39:15'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:39:16'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:39:16'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:39:16'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:39:16'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:39:17'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:39:17'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:39:18'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:40:21' prior: 50624400!
test03InvalidLineTypeRaisesError


	| readStream |
	
	readStream := self invalidImportDataWithInvalidLineType1.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
	
	readStream := self invalidImportDataWithInvalidLineType2.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:40:22'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:40:23'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:40:23'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:40:23'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:40:23'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:40:24'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:40:24'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:40:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:40:58' prior: 50625151!
test03InvalidLineTypeRaisesError


	| readStream readStream2 |
	
	readStream := self invalidImportDataWithInvalidLineType1.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
	
	readStream2 := self invalidImportDataWithInvalidLineType2.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:41:05' prior: 50625204!
test03InvalidLineTypeRaisesError


	| readStream readStream2 |
	
	readStream := self invalidImportDataWithInvalidLineType1.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
	
	readStream2 := self invalidImportDataWithInvalidLineType2.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:41:20' prior: 50625231!
test03InvalidLineTypeRaisesError


	| readStream2 |
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
	
	readStream2 := self invalidImportDataWithInvalidLineType2.
	 
	self 
		should: [ CustomerImporter valueFrom: readStream2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:41:41' prior: 50625258!
test03InvalidLineTypeRaisesError


	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:41:44'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:41:44'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:41:44'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:41:45'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:41:45'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:41:45'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:41:46'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:41:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:42:34'!
assertImporting

	^ self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:42:34' prior: 50625284!
test03InvalidLineTypeRaisesError


	self assertImporting.
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:44:25' prior: 50625334!
assertImporting

	| aReadStream |
	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !

!methodRemoval: ImportTest #assertImporting stamp: 'SG 6/28/2023 18:44:47'!
assertImporting

	| aReadStream |
	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:45:43' prior: 50625110!
test02EmptyLineRaisesError

	
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:45:48' prior: 50625389!
test02EmptyLineRaisesError
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:45:49'!
FAILURE!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:46:09'!
FAILURE!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:46:23'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:45:43' prior: 50625413!
test02EmptyLineRaisesError

	
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:47:39' prior: 50625445!
test02EmptyLineRaisesError
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithEmptyLines into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter emptyLineErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:47:41'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:47:41'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:47:42'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:47:42'!
ERROR!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:47:42'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:47:42'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:47:43'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:47:43'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:47:43'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:47:53' prior: 50625348!
test03InvalidLineTypeRaisesError


	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType1 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:47:55'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:47:55'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:47:55'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:47:56'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:47:56'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:47:56'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:47:57'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:47:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:48:22' prior: 50625511!
test03InvalidLineTypeRaisesError


	self 
		should: [ | readStream |
	readStream := self invalidImportDataWithInvalidLineType1.
	CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:48:42' prior: 50625561!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:48:43'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:48:44'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:48:44'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:48:45'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:48:45'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:48:45'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:48:46'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:48:46'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:49:01' prior: 50625587!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:49:19'!
assertImporting: readStream

	^ self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:49:19' prior: 50625639!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self assertImporting: readStream.

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:49:34' prior: 50625664!
assertImporting: aReadStream

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:52:20'!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 18:52:20' prior: 50625677!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self assertImporting: readStream raisesError: CustomerImporter invalidLineTypeErrorDescription.

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!methodRemoval: ImportTest #assertImporting: stamp: 'SG 6/28/2023 18:52:20'!
assertImporting: aReadStream

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]!
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 18:52:20' prior: 50625708!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:52:59' prior: 50625756!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			[self assert: 0 equals: (session selectAllOfType: Customer) size].
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:53:50' prior: 50625769!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			[self assert: 0 equals: (session selectAllOfType: Customer) size] value.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:54:13' prior: 50625782!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:55:59'!
assertImporting: aReadStream raisesError: anErrorDescription andImports: aBlockToCheckState  

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 18:55:59' prior: 50625723!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self assertImporting: readStream raisesError: CustomerImporter invalidLineTypeErrorDescription andImports: (self assert: 0 equals: (session selectAllOfType: Customer) size).

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !

!methodRemoval: ImportTest #assertImporting:raisesError: stamp: 'SG 6/28/2023 18:55:59'!
assertImporting: aReadStream raisesError: anErrorDescription 

	^ self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:56:13' prior: 50625806!
assertImporting: aReadStream raisesError: anErrorDescription andImports: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:56:16'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:56:16'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:56:16'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:56:17'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:56:17'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:56:18'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:56:18'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:57:28' prior: 50625469!
test02EmptyLineRaisesError
	
	self 
		assertImporting: self invalidImportDataWithEmptyLines 
		raisesError: CustomerImporter emptyLineErrorDescription
		andImports: [self assert: 0 equals: (session selectAllOfType: Customer) size]! !
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 18:58:11'!
assertImportingCustomerFrom: aReadStream raisesErrorWithDescription: anErrorDescription andImports: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 18:58:11' prior: 50625818!
test03InvalidLineTypeRaisesError
	
	| readStream |
	readStream := self invalidImportDataWithInvalidLineType1.

	self assertImportingCustomerFrom: readStream raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription andImports: (self assert: 0 equals: (session selectAllOfType: Customer) size).

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 18:58:11' prior: 50625886!
test02EmptyLineRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithEmptyLines 
		raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription
		andImports: [self assert: 0 equals: (session selectAllOfType: Customer) size]! !

!methodRemoval: ImportTest #assertImporting:raisesError:andImports: stamp: 'SG 6/28/2023 18:58:11'!
assertImporting: aReadStream raisesError: anErrorDescription andImports: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
		]!
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 18:58:24' prior: 50625896!
assertImportingCustomerFrom: aReadStream raisesErrorWithDescription: anErrorDescription andImports: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			aBlockToCheckState value.
		]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:58:25'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:58:25'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:58:26'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:58:26'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:58:26'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:58:27'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:58:27'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:58:44' prior: 50625909!
test03InvalidLineTypeRaisesError
	
	self assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription andImports: (self assert: 0 equals: (session selectAllOfType: Customer) size).

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:59:04' prior: 50625992!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		andImports: [self assert: 0 equals: (session selectAllOfType: Customer) size].

	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithInvalidLineType2 into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter invalidLineTypeErrorDescription equals: anError messageText.
			self assert: 0 equals: (session selectAllOfType: Customer) size.
		].
! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:59:26' prior: 50626014!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		andImports: [self assert: 0 equals: (session selectAllOfType: Customer) size].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		andImports: [self assert: 0 equals: (session selectAllOfType: Customer) size].! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:59:27'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 18:59:28'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 18:59:28'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 18:59:28'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 18:59:29'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 18:59:29'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 18:59:29'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 18:59:30'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 18:59:46' prior: 50624414!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingCustomerFields into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingCustomerDataErrorDescription   equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:00:31' prior: 50626081!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		andImports: [self assertPepeSanchezWasImportedCorrecty]! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:00:32'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:00:33'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:00:34'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:00:34'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:00:35'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:00:35'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:00:43' prior: 50624429!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithExtraCustomerFields into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraCustomerDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:01:28' prior: 50626133!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter extraCustomerDataErrorDescription 
		andImports: [self assertPepeSanchezWasImportedCorrecty]! !

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:01:29'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:01:30'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:01:30'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:01:30'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:01:31'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:01:31'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:01:31'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:01:32'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:01:41' prior: 50624444!
test06CantImportAddressWithLessThanSixFields
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithMissingAddressFields into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter missingAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:01:56' prior: 50626185!
test06CantImportAddressWithLessThanSixFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter missingAddressDataErrorDescription 
		andImports: [self assertPepeSanchezWasImportedCorrecty]! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:01:57'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:01:58'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:01:58'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:01:58'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:01:58'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:01:59'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:01:59'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:02:00'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:02:06' prior: 50624459!
test07CantImportAddressWithMoreThanSixFields
	
	self 
		should: [ CustomerImporter valueFrom: self invalidImportDataWithExtraAddressFields into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: CustomerImporter extraAddressDataErrorDescription equals: anError messageText.
			self assertPepeSanchezWasImportedCorrecty.
		].
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:02:20' prior: 50626237!
test07CantImportAddressWithMoreThanSixFields
	
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		andImports: [self assertPepeSanchezWasImportedCorrecty]! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:02:21'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:02:22'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:02:22'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:02:22'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:02:23'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:02:23'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:02:24'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:17:04' prior: 50626251!
test07CantImportAddressWithMoreThanSixFields
	
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		andImports: [self assertPepeSanchezWasImportedCorrecty] ! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:17:05'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:17:06'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:17:06'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:17:07'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:17:07'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:17:07'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:17:08'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:17:08'!
PASSED!

session := DataBaseSession for: (Array with: Address with: Customer).!

session beginTransaction.!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:20:00' prior: 50624382!
test01ValidCustomersAreImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: session.

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly ! !

CustomerImporter valueFrom: readStream into: session.!

----SNAPSHOT----(28 June 2023 19:27:01) CuisUniversity-5832.image priorSource: 9366952!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:29:49'!
test08CannotImportAddressWithoutCustomer
	
	| readStream |
	readStream := {}.
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		andImports: [self assert: 0 equals: (DataBaseSession selectAllOfType: Address) size] ! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:30:28' prior: 50626345!
test08CannotImportAddressWithoutCustomer
	
	| readStream |
	readStream := self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		andImports: [self assert: 0 equals: (DataBaseSession selectAllOfType: Address) size] ! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:30:58' prior: 50626358!
test08CannotImportAddressWithoutCustomer
	
	| readStream |
	readStream := self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	
	self 
		assertImportingCustomerFrom: readStream
		raisesErrorWithDescription: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription 
		andImports: [self assert: 0 equals: (DataBaseSession selectAllOfType: Address) size] ! !

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:31:01'!
ERROR!
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/28/2023 19:31:07'!
cannotImportAddressWithoutCustomerErrorDescription
	self shouldBeImplemented.! !
!CustomerImporter class methodsFor: 'error descriptions' stamp: 'SG 6/28/2023 19:31:29' prior: 50626391!
cannotImportAddressWithoutCustomerErrorDescription
	
	^ 'No se puede importar una dirección sin un cliente'! !

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:31:31'!
FAILURE!
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 19:33:23'!
assertImportingCustomerFrom: aReadStream raisesErrorWithDescription: anErrorDescription asserting: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			aBlockToCheckState value.
		]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626095!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [self assertPepeSanchezWasImportedCorrecty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50625932!
test02EmptyLineRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithEmptyLines 
		raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription
		asserting: [self assert: 0 equals: (session selectAllOfType: Customer) size]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626199!
test06CantImportAddressWithLessThanSixFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter missingAddressDataErrorDescription 
		asserting: [self assertPepeSanchezWasImportedCorrecty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626036!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assert: 0 equals: (session selectAllOfType: Customer) size].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assert: 0 equals: (session selectAllOfType: Customer) size].! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626373!
test08CannotImportAddressWithoutCustomer
	
	| readStream |
	readStream := self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	
	self 
		assertImportingCustomerFrom: readStream
		raisesErrorWithDescription: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription 
		asserting: [self assert: 0 equals: (DataBaseSession selectAllOfType: Address) size] ! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626147!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter extraCustomerDataErrorDescription 
		asserting: [self assertPepeSanchezWasImportedCorrecty]! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:33:23' prior: 50626289!
test07CantImportAddressWithMoreThanSixFields
	
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		asserting: [self assertPepeSanchezWasImportedCorrecty] ! !

!methodRemoval: ImportTest #assertImportingCustomerFrom:raisesErrorWithDescription:andImports: stamp: 'SG 6/28/2023 19:33:23'!
assertImportingCustomerFrom: aReadStream raisesErrorWithDescription: anErrorDescription andImports: aBlockToCheckState  

	self 
		should: [ CustomerImporter valueFrom: aReadStream into: session ]
		raise: Error
		withExceptionDo: [:anError |
			self assert: anErrorDescription equals: anError messageText.
			aBlockToCheckState value.
		]!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:33:26'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:33:27'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:33:27'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:33:27'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:33:28'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:33:28'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:33:28'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:33:29'!
PASSED!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:33:29'!
FAILURE!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:33:29'!
FAILURE!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:35:22'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:35:22'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:35:22'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:35:23'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:35:23'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:35:24'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:35:24'!
PASSED!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:35:24'!
FAILURE!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:35:24'!
FAILURE!
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/28/2023 19:35:47' prior: 50624851!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/28/2023 19:36:58' prior: 50626592!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	newCustomer isNil ifTrue: [ self error: self class cannotImportAddressWithoutCustomerErrorDescription ].
	
	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:37:00'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:37:00'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:37:01'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:37:01'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:37:01'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:37:02'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:37:02'!
PASSED!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:37:02'!
ERROR!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:37:02'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:42:06' prior: 50626476!
test08CannotImportAddressWithoutCustomer
	
	| readStream |
	readStream := self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:42:07'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:42:07'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:42:08'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:42:08'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:42:08'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:42:09'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:42:09'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:42:10'!
PASSED!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:42:10'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:42:26' prior: 50626640!
test08CannotImportAddressWithoutCustomer
	
	self 
		should: [ CustomerImporter valueFrom: self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' } into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:43:05' prior: 50626683!
test08CannotImportAddressWithoutCustomer

	| readStream |
	readStream :=  self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:43:13' prior: 50626695!
test08CannotImportAddressWithoutCustomer

	| readStream |
	
	readStream :=  self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:43:47'!
invalidaDataWithAddressButNoCustomer

	^ self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:43:47' prior: 50626708!
test08CannotImportAddressWithoutCustomer

	| readStream |
	
	readStream :=  self invalidaDataWithAddressButNoCustomer.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:43:53'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:43:53'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:43:53'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:43:54'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:43:54'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:43:54'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:43:55'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:43:55'!
PASSED!

!testRun: #ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:43:56'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:44:44'!
test08CantImportAddressWithoutCustomer

	| readStream |
	
	readStream :=  self invalidaDataWithAddressButNoCustomer.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !

!methodRemoval: ImportTest #test08CannotImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:44:44'!
test08CannotImportAddressWithoutCustomer

	| readStream |
	
	readStream :=  self invalidaDataWithAddressButNoCustomer.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	!

----SNAPSHOT----(28 June 2023 19:44:53) CuisUniversity-5832.image priorSource: 9430121!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:46:55' prior: 50626420!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [self assertNoCustomersImported]! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:47:03'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 19:47:09'!
assertNoCustomersImported
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 19:48:26' prior: 50626810!
assertNoCustomersImported

	^ self assert: 0 equals: self numberOfImportedCustomers! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:48:30'!
ERROR!
!ImportTest methodsFor: 'customer' stamp: 'SG 6/28/2023 19:48:42'!
numberOfImportedCustomers
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'customer' stamp: 'SG 6/28/2023 19:49:17' prior: 50626824!
numberOfImportedCustomers
	
	^ (session selectAllOfType: Customer) size! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:49:18'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:50:49' prior: 50626796!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [self assertPepeSanchezWasImportedCorrecty ]! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:50:50'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:50:51'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:50:51'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:50:51'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:50:52'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:50:52'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:50:53'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:50:53'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:50:53'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:51:52' prior: 50626444!
test06CantImportAddressWithLessThanSixFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter missingAddressDataErrorDescription 
		asserting: [self assertCustomerImportedWithoutAddress]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:52:11' prior: 50626503!
test07CantImportAddressWithMoreThanSixFields
	
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraAddressFields
		raisesErrorWithDescription: CustomerImporter extraAddressDataErrorDescription 
		asserting: [self assertCustomerImportedWithoutAddress] ! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:52:12'!
ERROR!
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 19:52:19'!
assertCustomerImportedWithoutAddress
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 19:54:22' prior: 50626906!
assertCustomerImportedWithoutAddress
	
	| customer |
	self assert: 1 equals: self numberOfImportedCustomers.
	customer := self customerWithIdentificationType: 'D' number: '22333444'.
	self assert: customer hasNoAddress.! !

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:54:31'!
FAILURE!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:55:12'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:55:13'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:55:13'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:55:13'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:55:14'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:55:14'!
FAILURE!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:55:15'!
FAILURE!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:55:15'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:55:17'!
FAILURE!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 19:56:11' prior: 50624615!
invalidImportDataWithMissingAddressFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,Olivos,BsAs'.
	}! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 19:56:32' prior: 50624583!
invalidImportDataWithExtraAddressFields

	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'A,San Martin,3322,2954,Olivos,1636,BsAs'.
	}! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:56:35'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:56:35'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:56:35'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:56:36'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:56:36'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:56:36'!
ERROR!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:56:37'!
ERROR!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:56:37'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:56:39'!
ERROR!
!Customer methodsFor: 'addresses' stamp: 'SG 6/28/2023 19:56:50'!
hasNoAddress
	self shouldBeImplemented.! !

	^ addresses isEmpty.!

	^ addresses isEmpty.!
!Customer methodsFor: 'addresses' stamp: 'SG 6/28/2023 19:57:08' prior: 50626999!
hasNoAddress
	
	^ addresses isEmpty.! !

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:57:09'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:57:12'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:57:15'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:57:16'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:57:16'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:57:16'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:57:16'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:57:17'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:57:17'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:57:17'!
PASSED!

----SNAPSHOT----(28 June 2023 19:57:25) CuisUniversity-5832.image priorSource: 9444543!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 19:58:17'!
invalidImportDataWithAddressButNoCustomer

	^ self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 19:58:17' prior: 50626768!
test08CantImportAddressWithoutCustomer

	| readStream |
	
	readStream :=  self invalidImportDataWithAddressButNoCustomer.
	
	self 
		should: [ CustomerImporter valueFrom: readStream into: session ]
		raise: Error
		withMessageText: CustomerImporter cannotImportAddressWithoutCustomerErrorDescription.
	! !

!methodRemoval: ImportTest #invalidaDataWithAddressButNoCustomer stamp: 'SG 6/28/2023 19:58:17'!
invalidaDataWithAddressButNoCustomer

	^ self readStreamWithLines: { 'A,San Martin,3322,Olivos,1636,BsAs' }!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:58:19'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:58:20'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:58:20'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:58:20'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:58:20'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:58:21'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:58:21'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:58:21'!
PASSED!

----SNAPSHOT----(28 June 2023 19:58:32) CuisUniversity-5832.image priorSource: 9452517!

!methodRemoval: ImportTest #assertNoCustomersImported stamp: 'SG 6/28/2023 19:59:00'!
assertNoCustomersImported

	^ self assert: 0 equals: self numberOfImportedCustomers!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:59:34'!
assertNoCustomersImported

	^ self assert: 0 equals: (session selectAllOfType: Customer) size! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:59:34' prior: 50626456!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assertNoCustomersImported].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assert: 0 equals: (session selectAllOfType: Customer) size].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:59:34' prior: 50627111!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assertNoCustomersImported].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assertNoCustomersImported].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 19:59:34' prior: 50626432!
test02EmptyLineRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithEmptyLines 
		raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription
		asserting: [self assertNoCustomersImported]! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:59:37'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 19:59:38'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 19:59:38'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 19:59:38'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 19:59:38'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 19:59:39'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 19:59:39'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 19:59:40'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 19:59:40'!
PASSED!
!ImportTest methodsFor: 'assertions' stamp: 'SG 6/28/2023 20:00:08' prior: 50627105!
assertNoCustomersImported

	^ self assert: 0 equals: self numberOfImportedCustomers ! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:00:10'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:00:11'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:00:11'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:00:11'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:00:11'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:00:12'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:00:12'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:00:12'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:01:01' prior: 50626838!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [
			self assertPepeSanchezWasImportedCorrecty.
			self assert: 1 equals: self numberOfImportedCustomers
			 ]! !

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:01:02'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:01:04'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:01:04'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:01:04'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:01:05'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:01:05'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:01:05'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:01:21' prior: 50626491!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter extraCustomerDataErrorDescription 
		asserting: [
			self assertPepeSanchezWasImportedCorrecty.
			self assert: 1 equals: self numberOfImportedCustomers
			]! !

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:01:22'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:01:23'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:01:23'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:01:24'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:01:24'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:01:24'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:01:25'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:01:25'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:01:25'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:01:59'!
assertOnlyValidCustomersAreImported

	self assertPepeSanchezWasImportedCorrecty.
			self assert: 1 equals: self numberOfImportedCustomers! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:01:59' prior: 50627217!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [
			self assertOnlyValidCustomersAreImported
			 ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:01:59' prior: 50627260!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter extraCustomerDataErrorDescription 
		asserting: [
			self assertOnlyValidCustomersAreImported
			]! !

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:02:01'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:02:02'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:02:02'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:02:02'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:02:03'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:02:03'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:02:04'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:02:04'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:02:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:02:10' prior: 50627322!
test05CantImportCustomerWithMoreThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithExtraCustomerFields
		raisesErrorWithDescription: CustomerImporter extraCustomerDataErrorDescription 
		asserting: [ self assertOnlyValidCustomersAreImported ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:02:21' prior: 50627310!
test04CantImportCustomerWithLessThanFiveFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingCustomerFields
		raisesErrorWithDescription: CustomerImporter missingCustomerDataErrorDescription
		asserting: [ self assertOnlyValidCustomersAreImported ]! !

----SNAPSHOT----(28 June 2023 20:02:29) CuisUniversity-5832.image priorSource: 9454276!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:02:42' prior: 50626879!
test06CantImportAddressWithLessThanSixFields
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithMissingAddressFields
		raisesErrorWithDescription: CustomerImporter missingAddressDataErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:02:50' prior: 50627129!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [self assertNoCustomersImported].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:02:53' prior: 50627401!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:02:54'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:02:55'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:02:55'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:02:55'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:02:56'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:02:56'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:02:57'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:02:57'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:02:57'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:03:09' prior: 50627146!
test02EmptyLineRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithEmptyLines 
		raisesErrorWithDescription: CustomerImporter emptyLineErrorDescription
		asserting: [ self assertNoCustomersImported ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:07:25' prior: 50627418!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType1 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 20:07:36'!
invalidImportDataWithInvalidLine

	^ self readStreamWithLines: { 'X,a,b,c' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:07:36' prior: 50627475!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLineType2 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].! !

!methodRemoval: ImportTest #invalidImportDataWithInvalidLineType1 stamp: 'SG 6/28/2023 20:07:36'!
invalidImportDataWithInvalidLineType1

	^ self readStreamWithLines: { 'X,a,b,c' }!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 20:08:03'!
invalidImportDataWithInvalidCustomerLine

	^ self readStreamWithLines: { 'Customer,x,y,z' }! !
!ImportTest methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:08:03' prior: 50627505!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].! !

!methodRemoval: ImportTest #invalidImportDataWithInvalidLineType2 stamp: 'SG 6/28/2023 20:08:03'!
invalidImportDataWithInvalidLineType2

	^ self readStreamWithLines: { 'Customer,x,y,z' }!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:08:17' prior: 50627540!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:08:19'!
ERROR!
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 20:08:27'!
invalidImportDataWithInvalidAddressLine
	self shouldBeImplemented.! !
!ImportTest methodsFor: 'test data' stamp: 'SG 6/28/2023 20:09:31' prior: 50627597!
invalidImportDataWithInvalidAddressLine
	
	^ self readStreamWithLines: {
		'C,Pepe,Sanchez,D,22333444'.
		'Address,San Martin,3322,Olivos,1636,BsAs'.
	}! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:09:33'!
FAILURE!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:11:56' prior: 50627570!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ].! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:11:58'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:11:58'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:11:59'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:11:59'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:12:00'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:12:00'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:12:01'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:12:01'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:12:01'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:13:13'!
assertCantImportInvalidLineType

	^ self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:13:13' prior: 50627613!
test03InvalidLineTypeRaisesError
	
	self assertCantImportInvalidLineType.

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:14:38' prior: 50627677!
test03InvalidLineTypeRaisesError
	
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ].! !

!methodRemoval: ImportTest #assertCantImportInvalidLineType stamp: 'SG 6/28/2023 20:14:41'!
assertCantImportInvalidLineType

	^ self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ]!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:14:49' prior: 50627303!
assertOnlyValidCustomersAreImported

	self assertPepeSanchezWasImportedCorrecty.
	self assert: 1 equals: self numberOfImportedCustomers! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:14:55'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:14:56'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:14:56'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:14:57'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:14:57'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:14:58'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:14:58'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:14:58'!
PASSED!

----SNAPSHOT----(28 June 2023 20:15:07) CuisUniversity-5832.image priorSource: 9463542!
!CustomerImporter methodsFor: 'validation' stamp: 'SG 6/28/2023 20:15:25' prior: 50624895!
assertImportingOnlyValidCustomerFields: customerData

	(customerData size > 5) ifTrue: [self error: self class extraCustomerDataErrorDescription ]! !
!CustomerImporter methodsFor: 'validation' stamp: 'SG 6/28/2023 20:15:30' prior: 50624881!
assertImportingAllAddressFields: addressData

	(addressData size < 6) ifTrue: [self error: self class missingAddressDataErrorDescription ]! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:15:32'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:15:32'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:15:33'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:15:33'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:15:33'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:15:34'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:15:34'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:15:34'!
PASSED!
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/28/2023 20:16:47'!
assertImportingOnlyAddressFields: addressData

	^ (addressData size > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ]! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/28/2023 20:16:47' prior: 50624811!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	self assertImportingOnlyAddressFields: addressData.
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !
!CustomerImporter methodsFor: 'line processing' stamp: 'SG 6/28/2023 20:17:01'!
assertImportingOnlyValidAddressFields: addressData

	^ (addressData size > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ]! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:17:01' prior: 50627818!
readAddressLine: aLine 

	| addressData address |
	addressData := self splitLineIntoTokens: aLine.
	
	self assertImportingAllAddressFields: addressData.
	self assertImportingOnlyValidAddressFields: addressData.
	
	address := Address new.
	address streetName: addressData second.
	address streetNumber: addressData third asNumber.
	address town: addressData fourth.
	address zipCode: addressData fifth asNumber.
	address province: addressData sixth.
	
	^ address! !

!methodRemoval: CustomerImporter #assertImportingOnlyAddressFields: stamp: 'SG 6/28/2023 20:17:01'!
assertImportingOnlyAddressFields: addressData

	^ (addressData size > 6) ifTrue: [self error: self class extraAddressDataErrorDescription ]!

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'SG 6/28/2023 20:17:51'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream assertThereIsCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:17:51' prior: 50624858!
readCustomerIntoSessionFrom: aLine

	assertThereIsCustomer := self readCustomerLine: aLine.
	session persist: assertThereIsCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:17:51' prior: 50626600!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	assertThereIsCustomer isNil ifTrue: [ self error: self class cannotImportAddressWithoutCustomerErrorDescription ].
	
	newAddress := self readAddressLine: aLine.
	assertThereIsCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/28/2023 20:17:51' prior: 50627885!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	assertThereIsCustomer isNil ifTrue: [ self error: self class cannotImportAddressWithoutCustomerErrorDescription ].
	
	newAddress := self readAddressLine: aLine.
	assertThereIsCustomer addAddress: newAddress! !

!classDefinition: #CustomerImporter category: 'CustomerImporter' stamp: 'SG 6/28/2023 20:18:41'!
Object subclass: #CustomerImporter
	instanceVariableNames: 'session readStream newCustomer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter'!
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:18:41' prior: 50627877!
readCustomerIntoSessionFrom: aLine

	newCustomer := self readCustomerLine: aLine.
	session persist: newCustomer! !
!CustomerImporter methodsFor: 'as yet unclassified' stamp: 'SG 6/28/2023 20:18:41' prior: 50627897!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	newCustomer isNil ifTrue: [ self error: self class cannotImportAddressWithoutCustomerErrorDescription ].
	
	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/28/2023 20:19:10'!
assertThereIsCustomer

	^ newCustomer isNil ifTrue: [ self error: self class cannotImportAddressWithoutCustomerErrorDescription ]! !
!CustomerImporter methodsFor: 'evaluating' stamp: 'SG 6/28/2023 20:19:10' prior: 50627924!
readAddressIntoSessionFrom: aLine

	| newAddress |
	
	self assertThereIsCustomer.
	
	newAddress := self readAddressLine: aLine.
	newCustomer addAddress: newAddress! !

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:19:15'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:19:15'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:19:16'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:19:17'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:19:17'!
PASSED!

----SNAPSHOT----(28 June 2023 20:19:24) CuisUniversity-5832.image priorSource: 9475630!
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:20:51'!
assertLineTypeIsValid

	^ self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:20:51' prior: 50627696!
test03InvalidLineTypeRaisesError
	
	self assertLineTypeIsValid.

	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ].
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:21:28'!
assertCustomerLineTypeIsJustC

	^ self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidCustomerLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertNoCustomersImported ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:21:28' prior: 50627988!
test03InvalidLineTypeRaisesError
	
	self assertLineTypeIsValid.

	self assertCustomerLineTypeIsJustC.
		
	self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ].! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:21:40'!
assertAddressLineTypeIsJustA

	^ self 
		assertImportingCustomerFrom: self invalidImportDataWithInvalidAddressLine 
		raisesErrorWithDescription: CustomerImporter invalidLineTypeErrorDescription 
		asserting: [ self assertCustomerImportedWithoutAddress ]! !
!ImportTest methodsFor: 'tests' stamp: 'SG 6/28/2023 20:21:40' prior: 50628017!
test03InvalidLineTypeRaisesError
	
	self assertLineTypeIsValid.

	self assertCustomerLineTypeIsJustC.
		
	self assertAddressLineTypeIsJustA.! !

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:21:44'!
PASSED!

!testRun: #ImportTest #test01ValidCustomersAreImportedCorrectly stamp: 'SG 6/28/2023 20:21:45'!
PASSED!

!testRun: #ImportTest #test02EmptyLineRaisesError stamp: 'SG 6/28/2023 20:21:45'!
PASSED!

!testRun: #ImportTest #test03InvalidLineTypeRaisesError stamp: 'SG 6/28/2023 20:21:46'!
PASSED!

!testRun: #ImportTest #test04CantImportCustomerWithLessThanFiveFields stamp: 'SG 6/28/2023 20:21:46'!
PASSED!

!testRun: #ImportTest #test05CantImportCustomerWithMoreThanFiveFields stamp: 'SG 6/28/2023 20:21:47'!
PASSED!

!testRun: #ImportTest #test06CantImportAddressWithLessThanSixFields stamp: 'SG 6/28/2023 20:21:47'!
PASSED!

!testRun: #ImportTest #test07CantImportAddressWithMoreThanSixFields stamp: 'SG 6/28/2023 20:21:48'!
PASSED!

!testRun: #ImportTest #test08CantImportAddressWithoutCustomer stamp: 'SG 6/28/2023 20:21:48'!
PASSED!

----SNAPSHOT----(28 June 2023 20:21:59) CuisUniversity-5832.image priorSource: 9482378!