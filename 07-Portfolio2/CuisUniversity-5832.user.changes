

----QUIT----(30 May 2023 00:05:32) CuisUniversity-5832.image priorSource: 4928100!

----STARTUP---- (30 May 2023 00:05:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5832.image!


----QUIT----(30 May 2023 00:05:33) CuisUniversity-5832.image priorSource: 9366537!

----STARTUP---- (30 May 2023 14:39:58) as /home/sponja/Temp/Cuises/cursada3/CuisUniversity-5832.image!


----End fileIn of /home/sponja/Temp/Cuises/cursada3/Portfolio-Solucion.st----!

----SNAPSHOT----(30 May 2023 14:41:10) CuisUniversity-5832.image priorSource: 9366758!

!methodRemoval: Transfer #sender stamp: 'TS 5/30/2023 14:42:25'!
sender

	^ sender!

!methodRemoval: Transfer #receiver stamp: 'TS 5/30/2023 14:42:30'!
receiver

	^ receiver!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 14:42:34'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:42:36'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:42:36'!
PASSED!
!Transfer methodsFor: 'initialization' stamp: 'TS 5/30/2023 14:42:48' prior: 50625439!
initializeWith: aValue from: aSender to: aReceiver 
	
	value := aValue.
	withdrawLeg := WithdrawLeg register: self on: aSender.
	depositLeg := DepositLeg register: self on: aReceiver
! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 14:42:55'!
PASSED!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 14:43:06'!
Object subclass: #Transfer
	instanceVariableNames: 'value receiver withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 14:43:06'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransaction methodsFor: 'reports' stamp: 'TS 5/30/2023 14:45:40'!
accountSummaryLine

	self subclassResponsibility! !
!Deposit methodsFor: 'nil' stamp: 'TS 5/30/2023 14:46:31' overrides: 50625758!
accountSummaryLine

	^ 'Depósito por ', self value asString! !
!DepositLeg methodsFor: 'nil' stamp: 'TS 5/30/2023 14:47:45' overrides: 50625758!
accountSummaryLine

	^ 'Entrada por transferencia de ', self value asString! !
!WithdrawLeg methodsFor: 'nil' stamp: 'TS 5/30/2023 14:48:06' overrides: 50625758!
accountSummaryLine

	^ 'Salida por transferencia de ', self value asString! !
!Withdraw methodsFor: 'nil' stamp: 'TS 5/30/2023 14:48:58' overrides: 50625758!
accountSummaryLine

	^ 'Extracción por ', self value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 14:49:46' prior: 50625181!
lines

	| reportLines |

	reportLines := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		reportLines add: aTransaction accountSummaryLine
	].

	reportLines add: 'Balance = ', account balance printString.
	
	^ reportLines! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:49:49'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:49:49'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 14:50:17' prior: 50625784!
lines

	| reportLines |

	reportLines := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		reportLines add: aTransaction accountSummaryLine
	].

	reportLines add: 'Balance = ', account balance asString.
	
	^ reportLines! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:50:18'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:50:18'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 14:50:25' prior: 50625819!
lines

	| reportLines |

	reportLines := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		reportLines addLast: aTransaction accountSummaryLine
	].

	reportLines add: 'Balance = ', account balance asString.
	
	^ reportLines! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 14:50:29' prior: 50625854!
lines

	| reportLines |

	reportLines := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		reportLines addLast: aTransaction accountSummaryLine
	].

	reportLines addLast: 'Balance = ', account balance asString.
	
	^ reportLines! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:50:30'!
PASSED!

----SNAPSHOT----(30 May 2023 14:50:39) CuisUniversity-5832.image priorSource: 9404807!
!AccountTransaction methodsFor: 'reports' stamp: 'TS 5/30/2023 14:54:18'!
affectTransferNetValue: aNetValue

	self subclassResponsibility! !
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 14:54:31' overrides: 50625903!
affectTransferNetValue: aNetValue

	^ aNetValue! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 14:54:46' overrides: 50625903!
affectTransferNetValue: aNetValue

	^ aNetValue + self value! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 14:55:04' overrides: 50625903!
affectTransferNetValue: aNetValue

	^ aNetValue - self value! !
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 14:55:14' overrides: 50625903!
affectTransferNetValue: aNetValue

	^ aNetValue! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 14:55:44' prior: 50625519 overrides: 16902254!
value

	| netValue |

	netValue := 0.
	
	account onTransactionsDo: [:aTransaction | 
		netValue := aTransaction affectTransferNetValue: netValue
	].

	^ netValue.! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 14:55:46'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 14:55:46'!
PASSED!
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:00:32'!
test07PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:00:47' prior: 50625960!
test07PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio ! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:01:14'!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio ! !

!methodRemoval: ReportTest #test07PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:01:14'!
test07PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:03:59' prior: 50625983!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self assert: #(
			
		) asSet
		equals: (AccountSummary for: portfolio) lines.
	
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:04:14' prior: 50626008!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self assert: #(
			'Depósito por 50'
			
		) asSet
		equals: (AccountSummary for: portfolio) lines.
	
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:04:38' prior: 50626028!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines.
	
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:04:54' prior: 50626048!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines.
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:05:06' prior: 50626071!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self
		assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
	) asSet
		equals: (AccountSummary for: portfolio) lines.
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:05:08' prior: 50626094!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self
		assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines.
	! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:06:12' prior: 50626117!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self
		assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines.
		
	self assert: 0 equals: (TransferNet for: portfolio)	 value.! !
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:06:13' prior: 50626140!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self
		assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines.
		
	self assert: 0 equals: (TransferNet for: portfolio)	 value.
! !

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:06:19'!
ERROR!
!Portfolio methodsFor: 'transactions' stamp: 'TS 5/30/2023 15:06:27'!
onTransactionsDo: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'transactions' stamp: 'TS 5/30/2023 15:07:17' prior: 50626193!
onTransactionsDo: aBlock 

	accounts do: [:anAccount |
		anAccount onTransactionsDo: aBlock
	]! !

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:07:36'!
FAILURE!
!ReportTest methodsFor: 'testing' stamp: 'TS 5/30/2023 15:07:52' prior: 50626165!
test08PortfoliosHaveCorrectAccountSummaryAndTransferNet

	| account1 account2 portfolio |
	account1 := ReceptiveAccount new.
	Deposit register: 50 on: account1.
	
	account2 := ReceptiveAccount new.
	Transfer register: 50 from: account1 to: account2.
	
	portfolio := Portfolio new.
	portfolio add: account1; add: account2.
	
	"
	Los comparamos como conjuntos porque nos dijeron que no
	importa el orden entre las transacciones de las cuentas
	"
	self
		assert: #(
			'Depósito por 50'
			'Salida por transferencia de 50'
			'Entrada por transferencia de 50'
			'Balance = 50'
		) asSet
		equals: (AccountSummary for: portfolio) lines asSet.
		
	self assert: 0 equals: (TransferNet for: portfolio)	 value.
! !

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:07:55'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:07:55'!
PASSED!
!Account methodsFor: 'transactions' stamp: 'TS 5/30/2023 15:08:12'!
onTransactionsDo: aBlock

	self subclassResponsibility ! !
!Account methodsFor: 'transactions' stamp: 'TS 5/30/2023 15:08:12' prior: 50626265!
onTransactionsDo: aBlock

	self subclassResponsibility! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 15:10:45'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 15:10:45'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:13:35' prior: 50625865!
lines

	| reportLines |

	reportLines := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		aTransaction addLineToAccountSummary: self
	].

	reportLines addLast: 'Balance = ', account balance asString.
	
	^ reportLines! !
!AccountTransaction methodsFor: 'reports' stamp: 'TS 5/30/2023 15:13:58'!
addLineToAccountSummary: anAccountSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:15:05' overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addDepositLine: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:15:20' overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addDepositLine: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:15:31' prior: 50626428 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addDepositLegLine: self! !
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:15:55' prior: 50626422 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfDeposit: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:16:16' prior: 50626434 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfDepositLeg! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:16:19' prior: 50626446 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfDepositLeg: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:16:31' overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfWithdrawLeg: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:16:48' prior: 50626458 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfWithdrawLeg: self! !

----SNAPSHOT----(30 May 2023 15:16:53) CuisUniversity-5832.image priorSource: 9415972!
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 15:17:08' overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfWithdraw: self! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:18:08'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account asd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:18:06'!
addLineOfDeposit: aDeposit

	asd addLast: 'Depósito por: ', aDeposit value! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:18:27' prior: 50626407!
lines

	| asdf |

	asdf := OrderedCollection new.
	
	account onTransactionsDo: [:aTransaction |
		aTransaction addLineToAccountSummary: self
	].

	asdf addLast: 'Balance = ', account balance asString.
	
	^ asdf! !

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:18:32'!
Object subclass: #AccountSummary
	instanceVariableNames: 'account reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:18:32' prior: 50626487!
addLineOfDeposit: aDeposit

	reportLines addLast: 'Depósito por: ', aDeposit value! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:18:54'!
addLineOfWithdraw: aWithdraw

	reportLines addLast: 'Extracción por: ', aWithdraw value! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:19:20'!
addLineOfWithdrawLeg: aWithdrawLeg

	reportLines addLast: 'Salida por transferencia de: ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:19:25' prior: 50626516!
addLineOfWithdraw: aWithdraw

	reportLines addLast: 'Extracción por: ', aWithdraw value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:19:28' prior: 50626511!
addLineOfDeposit: aDeposit

	reportLines addLast: 'Depósito por: ', aDeposit value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:19:48'!
addLineOfDepositLeg: aWithdrawLeg

	reportLines addLast: 'Entrada por transferencia de: ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:20:09' prior: 50626493!
lines

	account onTransactionsDo: [:aTransaction |
		aTransaction addLineToAccountSummary: self
	].

	reportLines addLast: 'Balance = ', account balance asString.
	
	^ reportLines! !
!AccountSummary methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:20:17' prior: 50625206!
initializeFor: anAccount 

	account := anAccount.
	reportLines := OrderedCollection new! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:20:25'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:20:25'!
FAILURE!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:20:25'!
FAILURE!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:20:25'!
FAILURE!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:20:25'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:20:25'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:20:25'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:20:25'!
FAILURE!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:20:26'!
FAILURE!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:20:53' prior: 50626529!
addLineOfWithdraw: aWithdraw

	reportLines addLast: 'Extracción por ', aWithdraw value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:20:56' prior: 50626522!
addLineOfWithdrawLeg: aWithdrawLeg

	reportLines addLast: 'Salida por transferencia de ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:20:58' prior: 50626541!
addLineOfDepositLeg: aWithdrawLeg

	reportLines addLast: 'Entrada por transferencia de ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:01' prior: 50626535!
addLineOfDeposit: aDeposit

	reportLines addLast: 'Depósito por ', aDeposit value asString! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:21:04'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:21:04'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:35'!
addLine: aString

	reportLines addLast: aString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:42' prior: 50626615!
addLineOfDeposit: aDeposit

	self addLine: 'Depósito por ', aDeposit value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:52' prior: 50626608!
addLineOfDepositLeg: aWithdrawLeg

	self addLine: 'Entrada por transferencia de ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:55' prior: 50626601!
addLineOfWithdrawLeg: aWithdrawLeg

	self addLine: 'Salida por transferencia de ', aWithdrawLeg value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:21:58' prior: 50626595!
addLineOfWithdraw: aWithdraw

	self addLine: 'Extracción por ', aWithdraw value asString! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:22:01' prior: 50626548!
lines

	account onTransactionsDo: [:aTransaction |
		aTransaction addLineToAccountSummary: self
	].

	self addLine: 'Balance = ', account balance asString.
	
	^ reportLines! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:22:04'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:22:04'!
PASSED!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:25:48' prior: 50625928 overrides: 16902254!
value

	| netValue |

	netValue := 0.
	
	account onTransactionsDo: [:aTransaction | 
		aTransaction addValueToTransferNet: self
	].

	^ netValue.! !

!methodRemoval: Deposit #affectTransferNetValue: stamp: 'TS 5/30/2023 15:26:02'!
affectTransferNetValue: aNetValue

	^ aNetValue!
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:26:22'!
addValueToTransferNet: aTransferNet

	aTransferNet addDepositValue: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:26:34'!
addValueToTransferNet: aTransferNet

	aTransferNet addDepositValue: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:26:38' prior: 50626733!
addValueToTransferNet: aTransferNet

	aTransferNet addDepositLegValue: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:26:46'!
addValueToTransferNet: aTransferNet

	aTransferNet addWithdrawLegValue: self! !
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 15:27:02'!
addValueToTransferNet: aTransferNet

	aTransferNet addWithdrawLegValue: self! !
!AccountTransaction methodsFor: 'reports' stamp: 'TS 5/30/2023 15:27:11'!
addValueToTransferNet: aTransferNet

	self subclassResponsibility! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:27:36'!
addDepositValue: aDeposit
! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:27:48'!
addWithdrawValue: aWithdraw
! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:28:12'!
Object subclass: #TransferNet
	instanceVariableNames: 'account asd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:28:10'!
addWithdrawLegValue: aWithdrawLeg

	asd := asd - aWithdrawLeg value
! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:28:26'!
addDepositLegValue: aWithdrawLeg

	asd := asd + aWithdrawLeg value
! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:28:33' prior: 50626717 overrides: 16902254!
value

	| asdf |

	asdf := 0.
	
	account onTransactionsDo: [:aTransaction | 
		aTransaction addValueToTransferNet: self
	].

	^ asdf.! !

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:28:39'!
Object subclass: #TransferNet
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:28:39' prior: 50626777!
addDepositLegValue: aWithdrawLeg

	netValue := netValue + aWithdrawLeg value
! !
!TransferNet methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:28:39' prior: 50626772!
addWithdrawLegValue: aWithdrawLeg

	netValue := netValue - aWithdrawLeg value
! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:28:46' prior: 50626783 overrides: 16902254!
value

	account onTransactionsDo: [:aTransaction | 
		aTransaction addValueToTransferNet: self
	].

	^ netValue.! !
!TransferNet methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:28:51' prior: 50625531!
initializeFor: anAccount 

	account := anAccount.
	netValue := 0! !

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 15:29:09'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:29:33'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 15:29:34'!
PASSED!

!methodRemoval: AccountTransaction #accountSummaryLine stamp: 'TS 5/30/2023 15:29:40'!
accountSummaryLine

	self subclassResponsibility!

!methodRemoval: AccountTransaction #affectTransferNetValue: stamp: 'TS 5/30/2023 15:29:42'!
affectTransferNetValue: aNetValue

	self subclassResponsibility!

!methodRemoval: Deposit #accountSummaryLine stamp: 'TS 5/30/2023 15:29:50'!
accountSummaryLine

	^ 'Depósito por ', self value asString!

!methodRemoval: DepositLeg #accountSummaryLine stamp: 'TS 5/30/2023 15:30:05'!
accountSummaryLine

	^ 'Entrada por transferencia de ', self value asString!

!methodRemoval: DepositLeg #affectTransferNetValue: stamp: 'TS 5/30/2023 15:30:06'!
affectTransferNetValue: aNetValue

	^ aNetValue + self value!

!methodRemoval: WithdrawLeg #accountSummaryLine stamp: 'TS 5/30/2023 15:30:08'!
accountSummaryLine

	^ 'Salida por transferencia de ', self value asString!

!methodRemoval: WithdrawLeg #affectTransferNetValue: stamp: 'TS 5/30/2023 15:30:09'!
affectTransferNetValue: aNetValue

	^ aNetValue - self value!

!methodRemoval: Withdraw #accountSummaryLine stamp: 'TS 5/30/2023 15:30:10'!
accountSummaryLine

	^ 'Extracción por ', self value asString!

!methodRemoval: Withdraw #affectTransferNetValue: stamp: 'TS 5/30/2023 15:30:11'!
affectTransferNetValue: aNetValue

	^ aNetValue!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 15:32:03'!
PASSED!

!classDefinition: #TransactionOperation category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:37:54'!
Object subclass: #TransactionOperation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:37:54'!
TransactionOperation subclass: #AccountSummary
	instanceVariableNames: 'account reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransactionOperation subclass: #TransferNet
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:38:05'!
TransactionOperation subclass: #TransferNet
	instanceVariableNames: 'account netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:38:16'!
TransactionOperation subclass: #AccountSummary
	instanceVariableNames: 'reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNet category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:38:16'!
TransactionOperation subclass: #TransferNet
	instanceVariableNames: 'netValue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionOperation category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:38:16'!
Object subclass: #TransactionOperation
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountSummary methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:38:53' prior: 50626557!
initializeFor: anAccount 

	account := anAccount! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:38:58' prior: 50626680!
lines

	reportLines := OrderedCollection new.

	account onTransactionsDo: [:aTransaction |
		aTransaction addLineToAccountSummary: self
	].

	self addLine: 'Balance = ', account balance asString.
	
	^ reportLines! !
!TransferNet methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:39:06' prior: 50626817!
initializeFor: anAccount 

	account := anAccount! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:39:15' prior: 50626810 overrides: 16902254!
value
	
	netValue := 0.

	account onTransactionsDo: [:aTransaction | 
		aTransaction addValueToTransferNet: self
	].

	^ netValue.! !
!TransactionOperation methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:39:25'!
initializeFor: anAccount 

	account := anAccount! !

!methodRemoval: TransferNet #initializeFor: stamp: 'TS 5/30/2023 15:39:25'!
initializeFor: anAccount 

	account := anAccount!

!methodRemoval: AccountSummary #initializeFor: stamp: 'TS 5/30/2023 15:39:25'!
initializeFor: anAccount 

	account := anAccount!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:40:28'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:40:29'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:40:29'!
PASSED!
!TransactionOperation methodsFor: 'nil' stamp: 'TS 5/30/2023 15:41:46'!
operateOnDeposit: aDeposit

	self subclassResponsibility! !
!TransactionOperation methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:42:02'!
operateOnWithdrawLeg: aWithdrawLeg

	self subclassResponsibility! !
!TransactionOperation methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:42:09'!
operateOnWithdraw: aWithdraw

	self subclassResponsibility! !
!TransactionOperation methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:42:13'!
operateOnDepositLeg: aDepositLeg

	self subclassResponsibility! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:42:36' overrides: 50627329!
operateOnDeposit: aDeposit

	self addLine: 'Depósito por ', aDeposit value asString! !

!methodRemoval: AccountSummary #addLineOfDeposit: stamp: 'TS 5/30/2023 15:42:42'!
addLineOfDeposit: aDeposit

	self addLine: 'Depósito por ', aDeposit value asString!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:42:54' overrides: 50627334!
operateOnWithdrawLeg: aWithdrawLeg

	self addLine: 'Salida por transferencia de ', aWithdrawLeg value asString! !

!methodRemoval: AccountSummary #addLineOfWithdrawLeg: stamp: 'TS 5/30/2023 15:42:54'!
addLineOfWithdrawLeg: aWithdrawLeg

	self addLine: 'Salida por transferencia de ', aWithdrawLeg value asString!
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:43:04' prior: 50626440 overrides: 50626417!
addLineToAccountSummary: anAccountSummary

	anAccountSummary operateOnDeposit: self! !
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:43:29' overrides: 50627344!
operateOnDepositLeg: aWithdrawLeg

	self addLine: 'Entrada por transferencia de ', aWithdrawLeg value asString! !

!methodRemoval: AccountSummary #addLineOfDepositLeg: stamp: 'TS 5/30/2023 15:43:29'!
addLineOfDepositLeg: aWithdrawLeg

	self addLine: 'Entrada por transferencia de ', aWithdrawLeg value asString!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:43:42' overrides: 50627339!
operateOnWithdraw: aWithdraw

	self addLine: 'Extracción por ', aWithdraw value asString! !

!methodRemoval: AccountSummary #addLineOfWithdraw: stamp: 'TS 5/30/2023 15:43:42'!
addLineOfWithdraw: aWithdraw

	self addLine: 'Extracción por ', aWithdraw value asString!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:43:58' overrides: 50627344!
operateOnDepositLeg: aWithdrawLeg

	netValue := netValue + aWithdrawLeg value
! !

!methodRemoval: TransferNet #addDepositLegValue: stamp: 'TS 5/30/2023 15:43:58'!
addDepositLegValue: aWithdrawLeg

	netValue := netValue + aWithdrawLeg value
!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:44:16' overrides: 50627329!
operateOnDeposit: aDeposit
! !

!methodRemoval: TransferNet #addDepositValue: stamp: 'TS 5/30/2023 15:44:16'!
addDepositValue: aDeposit
!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:44:26' overrides: 50627334!
operateOnWithdrawLeg: aWithdrawLeg

	netValue := netValue - aWithdrawLeg value
! !

!methodRemoval: TransferNet #addWithdrawLegValue: stamp: 'TS 5/30/2023 15:44:26'!
addWithdrawLegValue: aWithdrawLeg

	netValue := netValue - aWithdrawLeg value
!
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:44:32' overrides: 50627339!
operateOnWithdraw: aWithdraw
! !

!methodRemoval: TransferNet #addWithdrawValue: stamp: 'TS 5/30/2023 15:44:32'!
addWithdrawValue: aWithdraw
!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/30/2023 15:46:42' prior: 50627239!
lines

	reportLines := OrderedCollection new.

	account onTransactionsDo: [:aTransaction |
		aTransaction doOperationOf: self
	].

	self addLine: 'Balance = ', account balance asString.
	
	^ reportLines! !
!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 15:46:51' prior: 50627254 overrides: 16902254!
value
	
	netValue := 0.

	account onTransactionsDo: [:aTransaction | 
		aTransaction doOperationOf: self
	].

	^ netValue.! !
!AccountTransaction methodsFor: 'reports' stamp: 'TS 5/30/2023 15:47:11'!
doOperationOf: anAccountSummary

	self subclassResponsibility! !
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:47:11' overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary operateOnDeposit: self! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:47:11' overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary addLineOfDepositLeg: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:47:11' overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary addLineOfWithdrawLeg: self! !
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 15:47:11' overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary addLineOfWithdraw: self! !

!methodRemoval: AccountTransaction #addLineToAccountSummary: stamp: 'TS 5/30/2023 15:47:11'!
addLineToAccountSummary: anAccountSummary

	self subclassResponsibility!

!methodRemoval: Deposit #addLineToAccountSummary: stamp: 'TS 5/30/2023 15:47:11'!
addLineToAccountSummary: anAccountSummary

	anAccountSummary operateOnDeposit: self!

!methodRemoval: DepositLeg #addLineToAccountSummary: stamp: 'TS 5/30/2023 15:47:11'!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfDepositLeg: self!

!methodRemoval: WithdrawLeg #addLineToAccountSummary: stamp: 'TS 5/30/2023 15:47:11'!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfWithdrawLeg: self!

!methodRemoval: Withdraw #addLineToAccountSummary: stamp: 'TS 5/30/2023 15:47:11'!
addLineToAccountSummary: anAccountSummary

	anAccountSummary addLineOfWithdraw: self!

!methodRemoval: Deposit #addValueToTransferNet: stamp: 'TS 5/30/2023 15:47:41'!
addValueToTransferNet: aTransferNet

	aTransferNet addDepositValue: self!

!methodRemoval: AccountTransaction #addValueToTransferNet: stamp: 'TS 5/30/2023 15:47:46'!
addValueToTransferNet: aTransferNet

	self subclassResponsibility!

!methodRemoval: DepositLeg #addValueToTransferNet: stamp: 'TS 5/30/2023 15:47:50'!
addValueToTransferNet: aTransferNet

	aTransferNet addDepositLegValue: self!
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:48:01' prior: 50627469 overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary operateOnDepositLeg: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:48:13' prior: 50627475 overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary operateOnWithdrawLeg: self! !

!methodRemoval: Withdraw #addValueToTransferNet: stamp: 'TS 5/30/2023 15:48:19'!
addValueToTransferNet: aTransferNet

	aTransferNet addWithdrawLegValue: self!
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 15:48:26' prior: 50627481 overrides: 50627458!
doOperationOf: anAccountSummary

	anAccountSummary operateOnWithdraw: self! !

!methodRemoval: WithdrawLeg #addValueToTransferNet: stamp: 'TS 5/30/2023 15:48:28'!
addValueToTransferNet: aTransferNet

	aTransferNet addWithdrawLegValue: self!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:48:34'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:48:35'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 15:48:41'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 15:48:41'!
PASSED!
!Deposit methodsFor: 'reports' stamp: 'TS 5/30/2023 15:48:59' prior: 50627463 overrides: 50627458!
doOperationOf: aTransactionOperation

	aTransactionOperation operateOnDeposit: self! !
!WithdrawLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:49:05' prior: 50627535 overrides: 50627458!
doOperationOf: aTransactionOperation

	aTransactionOperation operateOnWithdrawLeg: self! !

!methodRemoval: DepositLeg #affectBalance: stamp: 'TS 5/30/2023 15:49:12'!
affectBalance: aBalance

	^ aBalance + transfer value!
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:49:30' overrides: 50625241!
affectBalance: aBalance

	^ aBalance + self value! !
!DepositLeg methodsFor: 'balance' stamp: 'TS 5/30/2023 15:49:44' prior: 50627762 overrides: 50625241!
affectBalance: aBalance

	^ aBalance + transfer value! !
!DepositLeg methodsFor: 'balance' stamp: 'TS 5/30/2023 15:49:50' prior: 50627767 overrides: 50625241!
affectBalance: aBalance

	^ aBalance + self value! !
!WithdrawLeg methodsFor: 'balance' stamp: 'TS 5/30/2023 15:49:54' prior: 50625375 overrides: 50625241!
affectBalance: aBalance

	^ aBalance - self value! !
!DepositLeg methodsFor: 'reports' stamp: 'TS 5/30/2023 15:50:17' prior: 50627529 overrides: 50627458!
doOperationOf: aTransactionOperation

	aTransactionOperation operateOnDepositLeg: self! !
!Withdraw methodsFor: 'reports' stamp: 'TS 5/30/2023 15:50:23' prior: 50627546 overrides: 50627458!
doOperationOf: aTransactionOperation

	aTransactionOperation operateOnWithdraw: self! !

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:50:43'!
PASSED!

!testRun: #ReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

!testRun: #ReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 15:50:44'!
PASSED!

----SNAPSHOT----(30 May 2023 15:51:52) CuisUniversity-5832.image priorSource: 9434234!

----SNAPSHOT----(30 May 2023 15:54:46) CuisUniversity-5832.image priorSource: 9478361!

!classRenamed: #ReportTest as: #TransactionReportTest stamp: 'TS 5/30/2023 15:55:01'!
Smalltalk renameClassNamed: #ReportTest as: #TransactionReportTest!

TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReportTest category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:55:10'!
TestCase subclass: #PortfolioReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:58:43'!
Object subclass: #PortfolioStructureSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'no messages' stamp: 'TS 5/30/2023 15:58:32'!
test01EmptyPortfolioOnlyShowsItsName

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines! !
!PortfolioReportTest methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 15:58:46' prior: 50627881!
test01EmptyPortfolioOnlyShowsItsName

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 15:59:09'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 15:59:14'!
named: aString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 15:59:33' prior: 50627906!
named: aName

	^self new initializeNamed: aName ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 15:59:34'!
ERROR!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 15:59:40'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:59:40'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!Portfolio methodsFor: 'initialization' stamp: 'TS 5/30/2023 15:59:50' prior: 50627930!
initializeNamed: aName 

	name := aName.
	self initialize! !
!Portfolio methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:00:01' prior: 50627935!
initializeNamed: aName 

	name := aName! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:00:02'!
ERROR!
!PortfolioStructureSummary class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:00:09'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!PortfolioStructureSummary class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:00:12' prior: 50627948!
for: aPortfolio 

	^self new initializeFor: aPortfolio ! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:00:15'!
ERROR!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 16:00:22'!
Object subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureSummary methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:00:22'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortfolioStructureSummary methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:00:25' prior: 50627974!
initializeFor: aPortfolio 

	portfolio := aPortfolio.! !
!PortfolioStructureSummary methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:00:27' prior: 50627980!
initializeFor: aPortfolio 

	portfolio := aPortfolio! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:00:27'!
ERROR!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:00:43'!
lines
	self shouldBeImplemented.! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:01:09' prior: 50627994!
lines

	^ #('Portfolio de Juan') asOrderedCollection! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:01:10'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:01:10'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 16:01:14'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 16:01:14'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:03:23'!
test02PortfolioWithChildrenAccountsShowsThemWith1LevelOfIndentation

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:03:38'!
test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !

!methodRemoval: PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsThemWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:03:38'!
test02PortfolioWithChildrenAccountsShowsThemWith1LevelOfIndentation

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:05:50' prior: 50628160!
test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio account1 account2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta Mía'.
	portfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: account2.

	self
		assert: #(
			'Portfolio de Juan'
			'	Cuenta de María'
			'	Cuenta Mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:06:27' prior: 50628184!
test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio account1 account2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	portfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: account2.

	self
		assert: #(
			'Portfolio de Juan'
			'	Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:06:30'!
ERROR!
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:06:34'!
named: aUnicodeString 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aUnicodeString ! !
!ReceptiveAccount class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:06:43' prior: 50628225!
named: aName 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeNamed: aName! !

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:06:44'!
ERROR!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 16:06:48'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:06:48'!
initializeNamed: aName 
	self shouldBeImplemented.
	name := aName.! !
!ReceptiveAccount methodsFor: 'initialization' stamp: 'TS 5/30/2023 16:06:50' prior: 50628253!
initializeNamed: aName 

	name := aName.! !

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:06:51'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:06:55'!
named: aString with: aReceptiveAccount with: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount with: aReceptiveAccount3 ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:08:04' prior: 50628268!
named: aName with: anAccount with: anotherAccount

	^ (self named: aName)
		add: anAccount;
		add: anotherAccount;
		yourself! !

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:08:05'!
FAILURE!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:09:18' prior: 50628202!
test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio account1 account2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account1 with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:12:13' prior: 50627999!
lines

	| reportLines |
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio name.
	
	portfolio onAccountsDo: [:anAccount |
		reportLines addLast: String tab, anAccount name
	].

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:12:18' prior: 50628310!
lines

	| reportLines |
	
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio name.
	
	portfolio onAccountsDo: [:anAccount |
		reportLines addLast: String tab, anAccount name
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:12:19'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:12:19'!
ERROR!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:12:21'!
ERROR!
!Portfolio methodsFor: 'nil' stamp: 'TS 5/30/2023 16:12:44' overrides: 16903442!
name

	^ name! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 16:12:55'!
accountName

	^ name! !

!methodRemoval: Portfolio #name stamp: 'TS 5/30/2023 16:12:55'!
name

	^ name!
!ReceptiveAccount methodsFor: 'nil' stamp: 'TS 5/30/2023 16:13:51'!
accountName

	^ name! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:14:17'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:14:17'!
ERROR!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:14:19'!
ERROR!
!Portfolio methodsFor: 'accounts management' stamp: 'TS 5/30/2023 16:14:30'!
onAccountsDo: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'accounts management' stamp: 'TS 5/30/2023 16:14:42' prior: 50628365!
onAccountsDo: aBlock

	accounts do: aBlock! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:14:43'!
FAILURE!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:15:00' prior: 50628320!
lines

	| reportLines |
	
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		reportLines addLast: String tab, anAccount accountName
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:15:28'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:15:28'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:26:00'!
test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly

	| portfolio account1 account2 childPortfolio childPortolio parentPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	childPortolio := Portfolio named: 'Portfolio de Juan' with: account1.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:27:29' prior: 50628396!
test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly

	| account1 account2 childPortfolio parentPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:27:35'!
ERROR!
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:27:39'!
named: aString with: aReceptiveAccount 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeNamed: aString with: aReceptiveAccount ! !
!Portfolio class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 16:28:03' prior: 50628444!
named: aName with: anAccount 
	
	^ (self named: aName)
		add: anAccount;
		yourself! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:28:05'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:28:05'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:28:05'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:28:05'!
FAILURE!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:30:37' prior: 50628378!
lines

	| reportLines |
	
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ reportLines addLast: String tab, anAccount accountName ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			portfolio onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:31:27'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:31:27'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:31:27'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:31:27'!
FAILURE!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:32:01' prior: 50628477!
lines

	| reportLines |
	
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ reportLines addLast: String tab, anAccount accountName ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:32:11'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:32:11'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:32:11'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:32:18'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:32:18'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:32:18'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 16:33:37'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 16:33:37'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:34:21' prior: 50628513!
lines

	| reportLines |
	
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	].

	^ reportLines! !

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 16:35:33'!
Object subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio asd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:35:32' prior: 50628705!
lines

	asd := OrderedCollection new.
	
	asd addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			asd addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			asd addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				asd addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	].

	^ asd! !

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 16:35:36'!
Object subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 16:35:36' prior: 50628733!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	].

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:36:08'!
addLinesOfPortfolio: aPortfolio

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:36:45' prior: 50628760!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.
	
	self addLinesOfPortfolio: portfolio.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:36:48' prior: 50628796!
lines

	reportLines := OrderedCollection new.

	self addLinesOfPortfolio: portfolio.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:37:33' prior: 50628779!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:38:07' prior: 50628811!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:38:29'!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 16:38:29' prior: 50628804!
lines

	reportLines := OrderedCollection new.

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !

!methodRemoval: PortfolioStructureSummary #addLinesOfPortfolio: stamp: 'TS 5/30/2023 16:38:29'!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:39:14' prior: 50628847!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:39:16'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:39:16'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:39:16'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:39:22' prior: 50628892!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:39:47' prior: 50628924!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: String tab, anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'nil' stamp: 'TS 5/30/2023 16:40:27'!
getTabsForIndentationLevel: anIndentationLevel

	^ String new: anIndentationLevel withAll: Character tab! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:40:51' prior: 50628944!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 1), anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: String tab, anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: String tab, String tab, aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:41:01' prior: 50628972!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 1), anAccount accountName
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 1), anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 2), aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'indentation' stamp: 'TS 5/30/2023 16:42:21'!
addLine: aLine withIndentationLevel: anIndentationLevel

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aLine! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:42:25'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:42:25'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:42:25'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:43:00' prior: 50628995!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 1), anAccount accountName.
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 2), aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:43:11' prior: 50629040!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1.
	
			anAccount onAccountsDo: [:aChildAccount |
				reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel + 2), aChildAccount accountName.
			]
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:43:26' prior: 50629065!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1.
	
			anAccount onAccountsDo: [:aChildAccount |
				self addLine: aChildAccount accountName withIndentationLevel:  anIndentationLevel + 2
			]
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:43:26'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:43:26'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:43:26'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:48:36'!
test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio1 childPortfolio2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	childPortfolio1 := Portfolio named: 'Portfolio de Juan' with: account1.
	childPortfolio2 := Portfolio named: 'Portfolio de José' with: account2.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio1 with: childPortfolio2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Portfolio de José'
			'		Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:49:34' prior: 50629124!
test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio1 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	grandchildPortfolio := Portfolio named: 'Portfolio mío' with: account2.
	childPortfolio1 := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio1.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Portfolio de José'
			'		Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:49:41' prior: 50629150!
test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	grandchildPortfolio := Portfolio named: 'Portfolio mío' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Portfolio de José'
			'		Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/30/2023 16:49:53' prior: 50629177!
test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	grandchildPortfolio := Portfolio named: 'Portfolio mío' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'		Portfolio mío'
			'			Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:50:46'!
FAILURE!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:51:17' prior: 50629089!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel +1
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:51:17' prior: 50629235!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:51:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:51:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:51:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:51:34'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:51:55' prior: 50629254!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel +1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 16:51:55'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 16:51:55'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:52:36'!
addLinesOfReceptiveAccount: aReceptiveAccount withIndentationLevel: anIndentationLevel 

	self addLine: aReceptiveAccount accountName withIndentationLevel: anIndentationLevel + 1
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:52:51' prior: 50629290!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLinesOfReceptiveAccount: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel +1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:52:53'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:52:53'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:52:53'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:52:53'!
ERROR!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:53:02' prior: 50629469!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLinesOfReceptiveAccount: anAccount accountName withIndentationLevel:  anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:53:04' prior: 50629505!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLinesOfReceptiveAccount: anAccount accountName withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:53:05'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:53:05'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:53:05'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:53:05'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:53:06'!
ERROR!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:53:14' prior: 50629525!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLinesOfReceptiveAccount: anAccount withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:53:38'!
addLineOfReceptiveAccount: aReceptiveAccount withIndentationLevel: anIndentationLevel 

	self addLine: aReceptiveAccount accountName withIndentationLevel: anIndentationLevel + 1
! !
!PortfolioStructureSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 16:53:38' prior: 50629566!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLineOfReceptiveAccount: anAccount withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !

!methodRemoval: PortfolioStructureSummary #addLinesOfReceptiveAccount:withIndentationLevel: stamp: 'TS 5/30/2023 16:53:38'!
addLinesOfReceptiveAccount: aReceptiveAccount withIndentationLevel: anIndentationLevel 

	self addLine: aReceptiveAccount accountName withIndentationLevel: anIndentationLevel + 1
!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:54:44'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:54:44'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:54:44'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:54:44'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:54:47'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:54:58'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:54:58'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:54:58'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:54:58'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:54:59'!
FAILURE!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:55:06'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:55:06'!
FAILURE!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:55:06'!
FAILURE!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:55:06'!
FAILURE!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:55:07'!
FAILURE!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:55:37' prior: 50629595!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel: anIndentationLevel + 1 + 1

		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:55:47' prior: 50629688!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLine: anAccount accountName withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:55:48'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:55:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:55:48'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:55:48'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:55:53' prior: 50629585!
addLineOfReceptiveAccount: aReceptiveAccount withIndentationLevel: anIndentationLevel 

	self addLine: aReceptiveAccount accountName withIndentationLevel: anIndentationLevel
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:56:05' prior: 50629707!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLineOfReceptiveAccount: anAccount withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:56:07'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:56:07'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:56:07'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:56:07'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:56:42'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:56:42'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:56:42'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:56:42'!
PASSED!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 16:57:16'!
Object subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:14' prior: 50628867!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:19' prior: 50629814!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self addLinesOfPortfolio: portfolio.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:24' prior: 50629822!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:35' prior: 50629830!
lines

	reportLines := OrderedCollection new.

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:56' prior: 50629838!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:59' prior: 50629845!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0-

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:57:59' prior: 50629853!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self addLinesOfPortfolio: portfolio withIndentationLevel: 0.

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 16:58:02'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 16:58:02'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:58:02'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 16:58:02'!
PASSED!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 16:58:33' prior: 50629861!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self addLinesOfPortfolio: portfolio.

	^ reportLines! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 17:00:32'!
addLinesOfPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLineOfReceptiveAccount: anAccount
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount
		]
	].

	currentIndentationLevel := currentIndentationLevel - 1.! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 17:02:01'!
addLine: aLine

	self addLine: aLine withIndentationLevel: currentIndentationLevel. 
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 17:02:06' prior: 50629909!
addLine: aLine

	self addLine: aLine withIndentationLevel: currentIndentationLevel
! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 17:02:27'!
addLineOfReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 17:02:32'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 17:02:32'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:02:32'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:02:32'!
PASSED!

!methodRemoval: PortfolioStructureSummary #addLineOfReceptiveAccount:withIndentationLevel: stamp: 'TS 5/30/2023 17:02:35'!
addLineOfReceptiveAccount: aReceptiveAccount withIndentationLevel: anIndentationLevel 

	self addLine: aReceptiveAccount accountName withIndentationLevel: anIndentationLevel
!

!methodRemoval: PortfolioStructureSummary #addLinesOfPortfolio:withIndentationLevel: stamp: 'TS 5/30/2023 17:02:36'!
addLinesOfPortfolio: aPortfolio withIndentationLevel: anIndentationLevel 

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aPortfolio accountName.

	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue: [
			self addLineOfReceptiveAccount: anAccount withIndentationLevel: anIndentationLevel + 1
		].
		(anAccount isKindOf: Portfolio) ifTrue: [
			self addLinesOfPortfolio: anAccount withIndentationLevel: anIndentationLevel + 1
		]
	]
!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 17:03:49'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 17:03:49'!
PASSED!
!Portfolio methodsFor: 'nil' stamp: 'TS 5/30/2023 17:04:28'!
addLineToStructureSummary: aStructureSummary

	aStructureSummary addLinesOfPortfolio: self! !
!Portfolio methodsFor: 'report' stamp: 'TS 5/30/2023 17:04:51'!
addToStructureSummary: aStructureSummary

	aStructureSummary addLinesOfPortfolio: self! !

!methodRemoval: Portfolio #addLineToStructureSummary: stamp: 'TS 5/30/2023 17:04:51'!
addLineToStructureSummary: aStructureSummary

	aStructureSummary addLinesOfPortfolio: self!
!ReceptiveAccount methodsFor: 'nil' stamp: 'TS 5/30/2023 17:05:29'!
addToStructureSummary: aStructureSummary

	aStructureSummary addLineOfReceptiveAccount: self! !
!Account methodsFor: 'nil' stamp: 'TS 5/30/2023 17:05:42'!
addToStructureSummary: aStructureSummary

	self subclassResponsibility! !
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 17:06:14' prior: 50629893!
addLinesOfPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount |
		anAccount addToStructureSummary: self
	].

	currentIndentationLevel := currentIndentationLevel - 1.! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 17:06:16'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 17:06:16'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:06:16'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 17:06:16'!
PASSED!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 17:07:31'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 17:07:31'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Account category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 17:07:31'!
Object subclass: #Account
	instanceVariableNames: 'name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Account class methodsFor: 'instance creation' stamp: 'TS 5/30/2023 17:07:59'!
named: aName

	^self new initializeNamed: aName ! !

!methodRemoval: Portfolio class #named: stamp: 'TS 5/30/2023 17:07:59'!
named: aName

	^self new initializeNamed: aName !

!methodRemoval: ReceptiveAccount class #named: stamp: 'TS 5/30/2023 17:07:59'!
named: aName 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"

	^self new initializeNamed: aName!
!Account methodsFor: 'accessing' stamp: 'TS 5/30/2023 17:08:20'!
accountName

	^ name! !

!methodRemoval: Portfolio #accountName stamp: 'TS 5/30/2023 17:08:20'!
accountName

	^ name!

!methodRemoval: ReceptiveAccount #accountName stamp: 'TS 5/30/2023 17:08:20'!
accountName

	^ name!

----SNAPSHOT----(30 May 2023 17:09:25) CuisUniversity-5832.image priorSource: 9478449!

----QUIT----(30 May 2023 17:11:02) CuisUniversity-5832.image priorSource: 9554362!

----STARTUP---- (30 May 2023 23:47:59) as /home/sponja/Temp/Cuises/cursada3/CuisUniversity-5832.image!

!TransferNet methodsFor: 'report' stamp: 'TS 5/30/2023 23:50:03' prior: 50627451 overrides: 16902254!
value
	
	netValue := 0.

	account onTransactionsDo: [:aTransaction | 
		aTransaction doOperationOf: self
	].

	^ netValue! !

!classDefinition: #AccountOperation category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 23:52:03'!
Object subclass: #AccountOperation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/30/2023 23:52:03'!
AccountOperation subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 23:52:59'!
operateOnReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:52:59' prior: 50630139 overrides: 50630144!
addToStructureSummary: aStructureSummary

	aStructureSummary operateOnReceptiveAccount: self! !

!methodRemoval: PortfolioStructureSummary #addLineOfReceptiveAccount: stamp: 'TS 5/30/2023 23:52:59'!
addLineOfReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName
!
!PortfolioStructureSummary methodsFor: 'report' stamp: 'TS 5/30/2023 23:53:23'!
operateOnPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount |
		anAccount addToStructureSummary: self
	].

	currentIndentationLevel := currentIndentationLevel - 1.! !
!PortfolioStructureSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:53:23' prior: 50629886!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self operateOnPortfolio: portfolio.

	^ reportLines! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:53:23' prior: 50630128 overrides: 50630144!
addToStructureSummary: aStructureSummary

	aStructureSummary operateOnPortfolio: self! !

!methodRemoval: PortfolioStructureSummary #addLinesOfPortfolio: stamp: 'TS 5/30/2023 23:53:23'!
addLinesOfPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount |
		anAccount addToStructureSummary: self
	].

	currentIndentationLevel := currentIndentationLevel - 1.!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 23:53:25'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 23:53:25'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:53:25'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:53:25'!
PASSED!
!Account methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:08'!
doOperationOf: aStructureSummary

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:08' overrides: 50630331!
doOperationOf: aStructureSummary

	aStructureSummary operateOnPortfolio: self! !
!ReceptiveAccount methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:08' overrides: 50630331!
doOperationOf: aStructureSummary

	aStructureSummary operateOnReceptiveAccount: self! !
!PortfolioStructureSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:54:08' prior: 50630277!
operateOnPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount |
		anAccount doOperationOf: self
	].

	currentIndentationLevel := currentIndentationLevel - 1.! !

!methodRemoval: Account #addToStructureSummary: stamp: 'TS 5/30/2023 23:54:08'!
addToStructureSummary: aStructureSummary

	self subclassResponsibility!

!methodRemoval: Portfolio #addToStructureSummary: stamp: 'TS 5/30/2023 23:54:08'!
addToStructureSummary: aStructureSummary

	aStructureSummary operateOnPortfolio: self!

!methodRemoval: ReceptiveAccount #addToStructureSummary: stamp: 'TS 5/30/2023 23:54:08'!
addToStructureSummary: aStructureSummary

	aStructureSummary operateOnReceptiveAccount: self!
!Account methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:18' prior: 50630331!
doOperationOf: anAccountOperation

	self subclassResponsibility! !
!Portfolio methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:26' prior: 50630336 overrides: 50630376!
doOperationOf: anAccountOperation

	anAccountOperation operateOnPortfolio: self! !
!ReceptiveAccount methodsFor: 'report' stamp: 'TS 5/30/2023 23:54:32' prior: 50630342 overrides: 50630376!
doOperationOf: anAccountOperation

	anAccountOperation operateOnReceptiveAccount: self! !
!AccountOperation methodsFor: 'no messages' stamp: 'TS 5/30/2023 23:56:33'!
operateOnPortfolio: aPortfolio

	self subclassResponsibility ! !
!AccountOperation methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:56:33' prior: 50630394!
operateOnPortfolio: aPortfolio

	self subclassResponsibility! !
!AccountOperation methodsFor: 'as yet unclassified' stamp: 'TS 5/30/2023 23:56:51'!
operateOnReceptiveAccount: aReceptiveAccount

	self subclassResponsibility! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 23:57:44'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 23:57:44'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:57:44'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:57:44'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/30/2023 23:57:46'!
PASSED!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:03:54'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:03:43'!
test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName

	| childPortfolio portfolio |
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:04:03' prior: 50630587!
test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Martín'.

	self
		assert: #(
			'Portfolio de Martín'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:04:07'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:04:07'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:04:07'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:04:07'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:04:07'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:04:07'!
ERROR!
!PortfolioTransactionSummary class methodsFor: 'instance creation' stamp: 'TS 5/31/2023 00:04:10'!
for: aPortfolio 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeFor: aPortfolio ! !
!PortfolioTransactionSummary class methodsFor: 'instance creation' stamp: 'TS 5/31/2023 00:04:16' prior: 50630636!
for: aPortfolio 

	^self new initializeFor: aPortfolio! !

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:04:17'!
ERROR!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:04:22'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'initialization' stamp: 'TS 5/31/2023 00:04:22'!
initializeFor: aPortfolio 
	self shouldBeImplemented.
	portfolio := aPortfolio.! !
!PortfolioTransactionSummary methodsFor: 'initialization' stamp: 'TS 5/31/2023 00:04:25' prior: 50630663!
initializeFor: aPortfolio 

	portfolio := aPortfolio.! !

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:04:26'!
ERROR!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:04:33'!
lines
	self shouldBeImplemented.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:05:05' prior: 50630678!
lines

	^ { portfolio accountName } asOrderedCollection! !

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:05:06'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:05:13'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:05:13'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:05:13'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:05:13'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:05:13'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:05:13'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:07:31'!
test05PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary

	| portfolio account |
	account := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:07:38'!
test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary

	| portfolio account |
	account := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!methodRemoval: PortfolioReportTest #test05PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:07:38'!
test05PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary

	| portfolio account |
	account := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:07:42'!
FAILURE!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:11:00' prior: 50630683!
lines

	| reportLines |
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		reportLines addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLines addAllLast: (summaryLines collect: [:aLine | '	', aLine])
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:11:07'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:11:07'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:11:07'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:11:07'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:11:07'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:11:07'!
FAILURE!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:11:07'!
FAILURE!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:11:27' prior: 50630778!
lines

	| reportLines |
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		reportLines addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:11:27'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:11:27'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:11:28'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:11:28'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:11:28'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:11:28'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:12:22' prior: 50630824!
lines

	| reportLinesasd |
	reportLinesasd := OrderedCollection new.
	
	reportLinesasd addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		reportLinesasd addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLinesasd addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ reportLinesasd! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:12:42' prior: 50630865!
lines

	| asd |
	asd := OrderedCollection new.
	
	asd addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		asd addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		asd addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ asd! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:13:03' prior: 50630881!
lines

	| reportLines |
	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		reportLines addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ reportLines! !

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:13:14'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio asd'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:13:26'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:13:37' prior: 50630895!
lines

	| asd |
	asd := OrderedCollection new.
	
	asd addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		asd addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		asd addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ asd! !

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:13:42'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:13:57' prior: 50630927!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | | summaryLines |
		reportLines addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:13:59'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:13:59'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:13:59'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:13:59'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:13:59'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:13:59'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:14:15'!
addLinesOf: anAccount

	| summaryLines |
		reportLines addLast: '	', anAccount accountName.
		summaryLines := (AccountSummary for: anAccount) lines.
		reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:14:15' prior: 50630950!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount | self addLinesOf: anAccount
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:14:17' prior: 50631001!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		self addLinesOf: anAccount
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:14:22' prior: 50630990!
addLinesOf: anAccount

	| summaryLines |
reportLines addLast: '	', anAccount accountName.
summaryLines := (AccountSummary for: anAccount) lines.
reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:14:24' prior: 50631019!
addLinesOf: anAccount

	| summaryLines |

	reportLines addLast: '	', anAccount accountName.
	summaryLines := (AccountSummary for: anAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:15:54'!
test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName

	| portfolio account |
	account := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:16:38' prior: 50631039!
test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName

	| portfolio account childPortfolio |
	account := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account.
	childPortfolio := Portfolio named: 'Portfolio de Juan'.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
			'	Portfolio de Juan'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:16:42'!
FAILURE!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:18:10' prior: 50631010!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOf: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: '	', portfolio accountName.
		]
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:18:18'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:18:18'!
FAILURE!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:18:18'!
FAILURE!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:18:32' prior: 50631083!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOf: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: '	', anAccount accountName.
		]
	].

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:18:33'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:18:33'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:18:38' prior: 50631131!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOf: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: '	', anAccount accountName.
		]
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:18:48'!
addLinesOfReceptiveAccount: anAccount

	| summaryLines |

	reportLines addLast: '	', anAccount accountName.
	summaryLines := (AccountSummary for: anAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:18:48' prior: 50631175!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue: [
			reportLines addLast: '	', anAccount accountName.
		]
	].

	^ reportLines! !

!methodRemoval: PortfolioTransactionSummary #addLinesOf: stamp: 'TS 5/31/2023 00:18:48'!
addLinesOf: anAccount

	| summaryLines |

	reportLines addLast: '	', anAccount accountName.
	summaryLines := (AccountSummary for: anAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:19:12' prior: 50631200!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ reportLines addLast: '	', anAccount accountName ]
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:19:29'!
addLinesOfPortfolio: anAccount

	^ reportLines addLast: '	', anAccount accountName! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:19:29' prior: 50631224!
lines

	reportLines := OrderedCollection new.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:19:36' prior: 50631238!
addLinesOfPortfolio: aPortfolio

	^ reportLines addLast: '	', aPortfolio accountName! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:19:42' prior: 50631189!
addLinesOfReceptiveAccount: aReceptiveAccount

	| summaryLines |

	reportLines addLast: '	', aReceptiveAccount accountName.
	summaryLines := (AccountSummary for: aReceptiveAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:19:43'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:19:43'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:22:34'!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Martín'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: grandchildPortfolio with: account1.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
			'	Portfolio de Juan'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:22:51' prior: 50631305!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: grandchildPortfolio with: account1.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de Martín'
			'		Depósito por 50'
			'		Balance = 50'
			'	Portfolio de Juan'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:23:05' prior: 50631334!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: grandchildPortfolio with: account1.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de Juan'
			'			Depósito por 50'
			'			Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:24:06' prior: 50631363!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: grandchildPortfolio with: account1.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de Juan'
			'			Depósito por 50'
			'			Extracción por transferencia de 50'
			'			Balance = 0'
			'		Portfolio de María'
			'			Cuenta de María'
			'				Depósito por transferencia de 50'
			'				Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:24:09'!
FAILURE!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:25:24'!
Object subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:25:22' prior: 50631244!
lines

	reportLines := OrderedCollection new.
	indentationLevel := 0.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:25:36' prior: 50631440!
lines

	reportLines := OrderedCollection new.
	indentationLevel := 0.
	
	reportLines addLast: portfolio accountName.

	portfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:26:26' prior: 50631258!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	indentationLevel := indentationLevel + 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:26:28' prior: 50631470!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:27:35' prior: 50631479!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		
	].

	^	reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:27:36' prior: 50631488!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		
	].

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:27:44' prior: 50631499!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		
	].

	indentationLevel := indentationLevel - 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:27:53' prior: 50631510!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	indentationLevel := indentationLevel - 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:28:03' prior: 50631264!
addLinesOfReceptiveAccount: aReceptiveAccount

	| summaryLines |

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aReceptiveAccount accountName.
	summaryLines := (AccountSummary for: aReceptiveAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | '		', aLine])! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:28:08' prior: 50631540!
addLinesOfReceptiveAccount: aReceptiveAccount

	| summaryLines |

	reportLines addLast: (String new: indentationLevel withAll: Character tab), aReceptiveAccount accountName.
	summaryLines := (AccountSummary for: aReceptiveAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | (String new: indentationLevel + 1 withAll: Character tab), aLine])! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:28:18'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:28:18'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:28:18'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:28:18'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:28:18'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:28:18'!
FAILURE!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:28:18'!
FAILURE!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:28:18'!
FAILURE!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:28:42' prior: 50631455!
lines

	reportLines := OrderedCollection new.
	indentationLevel := 0.
	
	self addLinesOfPortfolio: portfolio.

	^ reportLines! !

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:28:42'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:28:42'!
FAILURE!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:28:42'!
FAILURE!

account1 := ReceptiveAccount named: 'Cuenta de Juan'.
Deposit register: 50 on: account1.
account2 := ReceptiveAccount named: 'Cuenta de María'.
Transfer register: 50 from: account1 to: account2.
grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
childPortfolio := Portfolio named: 'Portfolio de Juan' with: grandchildPortfolio with: account1.
portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.!

(PortfolioTransactionSummary for: portfolio) lines!

(PortfolioTransactionSummary for: portfolio) lines!

account1 := ReceptiveAccount named: 'Cuenta de Juan'.
Deposit register: 50 on: account1.
account2 := ReceptiveAccount named: 'Cuenta de María'.
Transfer register: 50 from: account1 to: account2.
grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.!

(PortfolioTransactionSummary for: portfolio) lines!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:30:48' prior: 50631392!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de Juan'
			'			Depósito por 50'
			'			Extracción por transferencia de 50'
			'			Balance = 0'
			'		Portfolio de María'
			'			Cuenta de María'
			'				Depósito por transferencia de 50'
			'				Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:30:49'!
FAILURE!

account1 := ReceptiveAccount named: 'Cuenta de Juan'.
Deposit register: 50 on: account1.
account2 := ReceptiveAccount named: 'Cuenta de María'.
Transfer register: 50 from: account1 to: account2.
grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.!

(PortfolioTransactionSummary for: portfolio) lines!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:31:33' prior: 50631681!
test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly

	| portfolio account1 childPortfolio account2 grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de Juan'.
	Deposit register: 50 on: account1.
	account2 := ReceptiveAccount named: 'Cuenta de María'.
	Transfer register: 50 from: account1 to: account2.
	grandchildPortfolio := Portfolio named: 'Portfolio de María' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	portfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de Juan'
			'			Depósito por 50'
			'			Salida por transferencia de 50'
			'			Balance = 0'
			'		Portfolio de María'
			'			Cuenta de María'
			'				Entrada por transferencia de 50'
			'				Balance = 50'
		) asOrderedCollection
		equals: (PortfolioTransactionSummary for: portfolio) lines
! !

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:31:34'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:31:34'!
PASSED!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:31:59'!
test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !

!methodRemoval: PortfolioReportTest #test01EmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:31:59'!
test01EmptyPortfolioOnlyShowsItsName

	| portfolio |
	portfolio := Portfolio named: 'Portfolio de Juan'.
	
	self
		assert: #('Portfolio de Juan') asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:32:13'!
test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio account1 account2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account1 with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
! !

!methodRemoval: PortfolioReportTest #test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:32:13'!
test02PortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation

	| portfolio account1 account2 |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	portfolio := Portfolio named: 'Portfolio de Martín' with: account1 with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: portfolio) lines
!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:32:19'!
test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly

	| account1 account2 childPortfolio parentPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !

!methodRemoval: PortfolioReportTest #test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:32:19'!
test03PortfolioWithNestedPortfolioShowsItsStructureCorrectly

	| account1 account2 childPortfolio parentPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio with: account2.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'	Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
!
!PortfolioReportTest methodsFor: 'tests' stamp: 'TS 5/31/2023 00:32:28'!
test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	grandchildPortfolio := Portfolio named: 'Portfolio mío' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'		Portfolio mío'
			'			Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
! !

!methodRemoval: PortfolioReportTest #test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:32:28'!
test04PortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly

	| account1 account2 parentPortfolio childPortfolio grandchildPortfolio |
	account1 := ReceptiveAccount named: 'Cuenta de María'.
	account2 := ReceptiveAccount named: 'Cuenta mía'.
	grandchildPortfolio := Portfolio named: 'Portfolio mío' with: account2.
	childPortfolio := Portfolio named: 'Portfolio de Juan' with: account1 with: grandchildPortfolio.
	parentPortfolio := Portfolio named: 'Portfolio de Martín' with: childPortfolio.

	self
		assert: #(
			'Portfolio de Martín'
			'	Portfolio de Juan'
			'		Cuenta de María'
			'		Portfolio mío'
			'			Cuenta mía'
		) asOrderedCollection
		equals: (PortfolioStructureSummary for: parentPortfolio) lines
!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:32:57'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:32:57'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:33:54'!
currentIndentation

	^ String new: indentationLevel withAll: Character tab! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:33:54' prior: 50631522!
addLinesOfPortfolio: aPortfolio

	reportLines addLast: (self currentIndentation), aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	indentationLevel := indentationLevel - 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:33:54' prior: 50631553!
addLinesOfReceptiveAccount: aReceptiveAccount

	| summaryLines |

	reportLines addLast: (self currentIndentation), aReceptiveAccount accountName.
	summaryLines := (AccountSummary for: aReceptiveAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | (String new: indentationLevel + 1 withAll: Character tab), aLine])! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:34:56'!
addLine: aLine

	reportLines addLast: (self currentIndentation), aLine! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:34:58'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:34:58'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:35:14' prior: 50632008!
addLinesOfPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	indentationLevel := indentationLevel + 1.
	
	aPortfolio onAccountsDo: [:anAccount |
		(anAccount isKindOf: ReceptiveAccount) ifTrue:
			[ self addLinesOfReceptiveAccount: anAccount ].
		(anAccount isKindOf: Portfolio) ifTrue:
			[ self addLinesOfPortfolio: anAccount ]
	].

	indentationLevel := indentationLevel - 1.! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:35:15'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:35:15'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:35:30' prior: 50632025!
addLinesOfReceptiveAccount: aReceptiveAccount

	| summaryLines |

	self addLine: aReceptiveAccount accountName.
	summaryLines := (AccountSummary for: aReceptiveAccount) lines.
	reportLines addAllLast: (summaryLines collect: [:aLine | (String new: indentationLevel + 1 withAll: Character tab), aLine])! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:35:30'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:35:47'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:35:47'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:36:22'!
withIncreasedIndentationLevelDo: aBlock	

	indentationLevel := indentationLevel + 1.
	
	aBlock value.

	indentationLevel := indentationLevel - 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:36:43' prior: 50632082!
addLinesOfPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self addLinesOfReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self addLinesOfPortfolio: anAccount ]
		].
	]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:36:43'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:36:43'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:37:18' prior: 50632135!
addLinesOfReceptiveAccount: aReceptiveAccount

	

	self addLine: aReceptiveAccount accountName.
	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine |
			self addLine: aLine
		]
	]! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:37:23' prior: 50632281!
addLinesOfReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName.

	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine |
			self addLine: aLine
		]
	]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:37:23'!
PASSED!

AccountOperation subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:39:56'!
AccountOperation subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines indentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 00:40:28'!
AccountOperation subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:40:28' prior: 50631602!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.
	
	self addLinesOfPortfolio: portfolio.

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:40:28' prior: 50632002!
currentIndentation

	^ String new: currentIndentationLevel withAll: Character tab! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:40:28' prior: 50632221!
withIncreasedIndentationLevelDo: aBlock	

	currentIndentationLevel := currentIndentationLevel + 1.
	
	aBlock value.

	currentIndentationLevel := currentIndentationLevel - 1.! !
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:41:46' overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self addLinesOfReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self addLinesOfPortfolio: anAccount ]
		].
	]! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:41:46' prior: 50632229!
addLinesOfPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self addLinesOfReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self operateOnPortfolio: anAccount ]
		].
	]! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:41:46' prior: 50632366!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.
	
	self operateOnPortfolio: portfolio.

	^ reportLines! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:41:46' prior: 50632390 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self addLinesOfReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self operateOnPortfolio: anAccount ]
		].
	]! !

!methodRemoval: PortfolioTransactionSummary #addLinesOfPortfolio: stamp: 'TS 5/31/2023 00:41:46'!
addLinesOfPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self addLinesOfReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self operateOnPortfolio: anAccount ]
		].
	]!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:41:57' overrides: 50630405!
operateOnReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName.

	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine |
			self addLine: aLine
		]
	]! !
!PortfolioTransactionSummary methodsFor: 'as yet unclassified' stamp: 'TS 5/31/2023 00:41:57' prior: 50632429 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount |
			(anAccount isKindOf: ReceptiveAccount) ifTrue:
				[ self operateOnReceptiveAccount: anAccount ].
			(anAccount isKindOf: Portfolio) ifTrue:
				[ self operateOnPortfolio: anAccount ]
		].
	]! !

!methodRemoval: PortfolioTransactionSummary #addLinesOfReceptiveAccount: stamp: 'TS 5/31/2023 00:41:57'!
addLinesOfReceptiveAccount: aReceptiveAccount

	self addLine: aReceptiveAccount accountName.

	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine |
			self addLine: aLine
		]
	]!
!PortfolioTransactionSummary methodsFor: 'report' stamp: 'TS 5/31/2023 00:42:28' prior: 50632470 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio onAccountsDo: [:anAccount | anAccount doOperationOf: self ].
	]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:42:30'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:43:25'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:43:25'!
PASSED!
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 00:43:42' prior: 50630349 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio onAccountsDo: [:anAccount | anAccount doOperationOf: self ].

	currentIndentationLevel := currentIndentationLevel - 1.! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 00:43:44'!
PASSED!

----SNAPSHOT----(31 May 2023 00:44:03) CuisUniversity-5832.image priorSource: 9554450!

----QUIT----(31 May 2023 00:44:16) CuisUniversity-5832.image priorSource: 9631267!

----STARTUP---- (31 May 2023 15:23:48) as /home/sponja/Temp/Cuises/cursada3/CuisUniversity-5832.image!

!Portfolio methodsFor: 'operation' stamp: 'TS 5/31/2023 15:27:26'!
doOperationOnAccountsOf: anAccountOperation

	accounts do: [:anAccount | anAccount doOperationOf: anAccountOperation ]! !
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:27:50' prior: 50632580 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	currentIndentationLevel := currentIndentationLevel + 1.

	aPortfolio doOperationOnAccountsOf: self.

	currentIndentationLevel := currentIndentationLevel - 1.! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:27:54'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:27:54'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:28:05' prior: 50632496 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [
		aPortfolio doOperationOnAccountsOf: self
	]! !
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:28:14' prior: 50632692 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addLine: aPortfolio accountName.
	
	self withIncreasedIndentationLevelDo: [ aPortfolio doOperationOnAccountsOf: self ]
! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:28:16'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:30:36'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/31/2023 15:30:38'!
PASSED!

!classDefinition: #PortfolioTreeSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:31:37'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:31:37'!
PortfolioTreeSummary subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountOperation subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:31:53'!
AccountOperation subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRemoval: #PortfolioTreeSummary stamp: 'TS 5/31/2023 15:31:55'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTransactionSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:33:01' prior: 50632039!
addLine: aLine

	self addLine: aLine withIndentationLevel: currentIndentationLevel! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:33:01'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:33:01'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:33:01'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:33:01'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:33:01'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:33:01'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:33:01'!
ERROR!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:33:01'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:33:03'!
ERROR!
!PortfolioTransactionSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:33:09'!
addLine: aLine withIndentationLevel: aCurrentIndentationLevel 
	self shouldBeImplemented.! !
!PortfolioTransactionSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 00:34:56' prior: 50632997!
addLine: aLine

	reportLines addLast: (self currentIndentation), aLine! !

!methodRemoval: PortfolioTransactionSummary #addLine:withIndentationLevel: stamp: 'TS 5/31/2023 15:34:19'!
addLine: aLine withIndentationLevel: aCurrentIndentationLevel 
	self shouldBeImplemented.!
!PortfolioTransactionSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:34:29' prior: 50633051!
addLine: aLine

	reportLines addLast: (self getTabsForIndentationLevel), aLine! !
!PortfolioStructureSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:35:07' prior: 50629915!
addLine: aLine

	reportLines addLast: (self getTabsForIndentationLevel), aLine
! !
!PortfolioStructureSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:35:12'!
getTabsForIndentationLevel

	^ String new: currentIndentationLevel withAll: Character tab! !
!PortfolioTransactionSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:35:24'!
getTabsForIndentationLevel

	^ String new: currentIndentationLevel withAll: Character tab! !

!methodRemoval: PortfolioTransactionSummary #currentIndentation stamp: 'TS 5/31/2023 15:35:25'!
currentIndentation

	^ String new: currentIndentationLevel withAll: Character tab!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:35:34'!
PASSED!

!methodRemoval: PortfolioStructureSummary #addLine:withIndentationLevel: stamp: 'TS 5/31/2023 15:35:59'!
addLine: aLine withIndentationLevel: anIndentationLevel

	reportLines addLast: (self getTabsForIndentationLevel: anIndentationLevel), aLine!

!methodRemoval: PortfolioStructureSummary #getTabsForIndentationLevel: stamp: 'TS 5/31/2023 15:36:01'!
getTabsForIndentationLevel: anIndentationLevel

	^ String new: anIndentationLevel withAll: Character tab!
!PortfolioStructureSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:36:58'!
withIncreasedIndentationLevelDo: aBlock	

	currentIndentationLevel := currentIndentationLevel + 1.
	
	aBlock value.

	currentIndentationLevel := currentIndentationLevel - 1.! !
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:37:12' prior: 50632644 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addLine: aPortfolio accountName.

	self withIncreasedIndentationLevelDo: [ aPortfolio doOperationOnAccountsOf: self ]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:37:21'!
PASSED!

!classDefinition: #PortfolioTreeSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:38:53'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:38:53'!
PortfolioTreeSummary subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioTreeSummary subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:00'!
PortfolioTreeSummary subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:27'!
PortfolioTreeSummary subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:27'!
PortfolioTreeSummary subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:27'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: 'reportLines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:38'!
PortfolioTreeSummary subclass: #PortfolioStructureSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:38'!
PortfolioTreeSummary subclass: #PortfolioTransactionSummary
	instanceVariableNames: 'portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:38'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: 'reportLines currentIndentationLevel'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioStructureSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:47'!
PortfolioTreeSummary subclass: #PortfolioStructureSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTransactionSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:47'!
PortfolioTreeSummary subclass: #PortfolioTransactionSummary
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioTreeSummary category: 'Portfolio-Solucion' stamp: 'TS 5/31/2023 15:39:47'!
AccountOperation subclass: #PortfolioTreeSummary
	instanceVariableNames: 'reportLines currentIndentationLevel portfolio'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioTreeSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:39:54'!
addLine: aLine

	reportLines addLast: (self getTabsForIndentationLevel), aLine
! !

!methodRemoval: PortfolioStructureSummary #addLine: stamp: 'TS 5/31/2023 15:39:54'!
addLine: aLine

	reportLines addLast: (self getTabsForIndentationLevel), aLine
!

!methodRemoval: PortfolioTransactionSummary #addLine: stamp: 'TS 5/31/2023 15:39:54'!
addLine: aLine

	reportLines addLast: (self getTabsForIndentationLevel), aLine!
!PortfolioTreeSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:39:59'!
getTabsForIndentationLevel

	^ String new: currentIndentationLevel withAll: Character tab! !

!methodRemoval: PortfolioStructureSummary #getTabsForIndentationLevel stamp: 'TS 5/31/2023 15:39:59'!
getTabsForIndentationLevel

	^ String new: currentIndentationLevel withAll: Character tab!

!methodRemoval: PortfolioTransactionSummary #getTabsForIndentationLevel stamp: 'TS 5/31/2023 15:39:59'!
getTabsForIndentationLevel

	^ String new: currentIndentationLevel withAll: Character tab!
!PortfolioTreeSummary methodsFor: 'report' stamp: 'TS 5/31/2023 15:40:19'!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self operateOnPortfolio: portfolio.

	^ reportLines! !

!methodRemoval: PortfolioStructureSummary #lines stamp: 'TS 5/31/2023 15:40:19'!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	self operateOnPortfolio: portfolio.

	^ reportLines!

!methodRemoval: PortfolioTransactionSummary #lines stamp: 'TS 5/31/2023 15:40:19'!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.
	
	self operateOnPortfolio: portfolio.

	^ reportLines!
!PortfolioTreeSummary methodsFor: 'indentation' stamp: 'TS 5/31/2023 15:40:41'!
withIncreasedIndentationLevelDo: aBlock	

	currentIndentationLevel := currentIndentationLevel + 1.
	
	aBlock value.

	currentIndentationLevel := currentIndentationLevel - 1.! !

!methodRemoval: PortfolioStructureSummary #withIncreasedIndentationLevelDo: stamp: 'TS 5/31/2023 15:40:41'!
withIncreasedIndentationLevelDo: aBlock	

	currentIndentationLevel := currentIndentationLevel + 1.
	
	aBlock value.

	currentIndentationLevel := currentIndentationLevel - 1.!

!methodRemoval: PortfolioTransactionSummary #withIncreasedIndentationLevelDo: stamp: 'TS 5/31/2023 15:40:41'!
withIncreasedIndentationLevelDo: aBlock	

	currentIndentationLevel := currentIndentationLevel + 1.
	
	aBlock value.

	currentIndentationLevel := currentIndentationLevel - 1.!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:40:49'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:40:49'!
PASSED!
!PortfolioTreeSummary methodsFor: 'initialization' stamp: 'TS 5/31/2023 15:41:17'!
initializeFor: aPortfolio 

	portfolio := aPortfolio! !

!methodRemoval: PortfolioStructureSummary #initializeFor: stamp: 'TS 5/31/2023 15:41:17'!
initializeFor: aPortfolio 

	portfolio := aPortfolio!

!methodRemoval: PortfolioTransactionSummary #initializeFor: stamp: 'TS 5/31/2023 15:41:17'!
initializeFor: aPortfolio 

	portfolio := aPortfolio.!
!PortfolioTreeSummary class methodsFor: 'instance creation' stamp: 'TS 5/31/2023 15:41:22'!
for: aPortfolio 

	^self new initializeFor: aPortfolio ! !

!methodRemoval: PortfolioStructureSummary class #for: stamp: 'TS 5/31/2023 15:41:22'!
for: aPortfolio 

	^self new initializeFor: aPortfolio !

!methodRemoval: PortfolioTransactionSummary class #for: stamp: 'TS 5/31/2023 15:41:22'!
for: aPortfolio 

	^self new initializeFor: aPortfolio!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:41:42'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:41:42'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:42:37'!
addAccountName: anAccount

	self addLine: anAccount accountName.
! !
!PortfolioTreeSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:42:42'!
addAccountName: anAccount

	self addLine: anAccount accountName.
! !

!methodRemoval: PortfolioTransactionSummary #addAccountName: stamp: 'TS 5/31/2023 15:42:42'!
addAccountName: anAccount

	self addLine: anAccount accountName.
!
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:42:52' prior: 50632701 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addAccountName: aPortfolio .
	
	self withIncreasedIndentationLevelDo: [ aPortfolio doOperationOnAccountsOf: self ]
! !
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:42:53' prior: 50633514 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addAccountName: aPortfolio.
	
	self withIncreasedIndentationLevelDo: [ aPortfolio doOperationOnAccountsOf: self ]
! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:42:54'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:42:54'!
PASSED!
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:43:03' prior: 50632458 overrides: 50630405!
operateOnReceptiveAccount: aReceptiveAccount

	self addAccountName: aReceptiveAccount.

	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine |
			self addLine: aLine
		]
	]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:43:05'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:43:05'!
PASSED!
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:43:09' prior: 50633154 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addAccountName: aPortfolio.

	self withIncreasedIndentationLevelDo: [ aPortfolio doOperationOnAccountsOf: self ]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:43:10'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:43:10'!
PASSED!
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:43:16' prior: 50630258 overrides: 50630405!
operateOnReceptiveAccount: aReceptiveAccount

	self addAccountName: aReceptiveAccount.
! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:43:17'!
PASSED!

----SNAPSHOT----(31 May 2023 15:43:26) CuisUniversity-5832.image priorSource: 9631355!
!AccountOperation commentStamp: '<historical>' prior: 0!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
!AccountOperation commentStamp: '<historical>' prior: 50633708!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
!PortfolioTreeSummary methodsFor: 'report' stamp: 'TS 5/31/2023 15:46:38' prior: 50633349!
lines

	reportLines := OrderedCollection new.
	currentIndentationLevel := 0.

	portfolio doOperationOf: self.

	^ reportLines! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:46:51'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/31/2023 15:46:53'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/31/2023 15:46:53'!
PASSED!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
!PortfolioTreeSummary commentStamp: '<historical>' prior: 0!
Esta clase representa una operación cuyo resultado es una serie de líneas que utiliza indentación para visualizar la estructura del árbol de un Portfolio.!
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:49:35' prior: 50633569 overrides: 50630405!
operateOnReceptiveAccount: aReceptiveAccount

	self addAccountName: aReceptiveAccount.

	self withIncreasedIndentationLevelDo: [
		(AccountSummary for: aReceptiveAccount) lines do: [:aLine | self addLine: aLine ]
	]! !

!classRenamed: #PortfolioTreeSummary as: #PortfolioTreeViewSummary stamp: 'TS 5/31/2023 15:51:00'!
Smalltalk renameClassNamed: #PortfolioTreeSummary as: #PortfolioTreeViewSummary!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
Esta clase representa una operación cuyo resultado es una serie de líneas que utiliza indentación para visualizar la estructura del árbol de un Portfolio.!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
Esta clase representa una operación cuyo resultado es una serie de líneas que utiliza indentación para visualizar la estructura del árbol de un Portfolio.!
!Portfolio methodsFor: 'operation' stamp: 'TS 5/31/2023 15:53:25'!
onAccountsDoOperationOf: anAccountOperation

	accounts do: [:anAccount | anAccount doOperationOf: anAccountOperation ]! !

!methodRemoval: Portfolio #doOperationOnAccountsOf: stamp: 'TS 5/31/2023 15:53:25'!
doOperationOnAccountsOf: anAccountOperation

	accounts do: [:anAccount | anAccount doOperationOf: anAccountOperation ]!
!Account methodsFor: 'operation' stamp: 'TS 5/31/2023 15:54:13'!
onTransactionDoOperationOf: aTransactionOperation

	self onTransactionsDo: [:aTransaction | aTransaction doOperationOf: aTransactionOperation ]! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:54:18'!
ERROR!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/31/2023 15:54:18'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:24'!
ERROR!
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:54:37' prior: 50633617 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addAccountName: aPortfolio.

	self withIncreasedIndentationLevelDo: [ aPortfolio onAccountsDoOperationOf:self ]! !
!PortfolioStructureSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:54:38' prior: 50634158 overrides: 50630400!
operateOnPortfolio: aPortfolio 

	self addAccountName: aPortfolio.

	self withIncreasedIndentationLevelDo: [ aPortfolio onAccountsDoOperationOf: self ]! !
!PortfolioTransactionSummary methodsFor: 'operation' stamp: 'TS 5/31/2023 15:54:47' prior: 50633523 overrides: 50630400!
operateOnPortfolio: aPortfolio

	self addAccountName: aPortfolio.
	
	self withIncreasedIndentationLevelDo: [ aPortfolio onAccountsDoOperationOf: self ]
! !

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:54:48'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/31/2023 15:54:49'!
PASSED!

!testRun: #PortfolioReportTest #test01PortfolioStructureOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test02PortfolioStructureOfPortfolioWithChildrenAccountsShowsTheirNamesWith1LevelOfIndentation stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test03PortfolioStructureOfPortfolioWithNestedPortfolioShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test04PortfolioStructureOfPortfolioWithMultipleLevelsOfNestingShowsItsStructureCorrectly stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test05PortfolioSummaryOfEmptyPortfolioOnlyShowsItsName stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test06PortfolioSummaryOfPortfolioWithChildAccountShowsItsNameAndItsChildsAccountSummary stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test07PortfolioSummaryOfPortfolioWithChildPortfolioShowsItsName stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioReportTest #test08PortfolioSummaryOfNestedPortfoliosShowsAllSummariesCorrectly stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test01TransferRemovesBalanceFromSenderAndAddsItToReceiver stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test02TransferLegsAreRegisteredOnParticipantAccounts stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test03TransferLegsCanAccessTransfer stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test04TransferLegsHasCorrectTransferValue stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test05CantCreateATransferBetweenTheSameAccount stamp: 'TS 5/31/2023 15:54:51'!
PASSED!

!testRun: #TransferTest #test06TransferValueMustBePositive stamp: 'TS 5/31/2023 15:54:51'!
PASSED!
!AccountSummary methodsFor: 'report' stamp: 'TS 5/31/2023 15:55:15' prior: 50627441!
lines

	reportLines := OrderedCollection new.

	account onTransactionDoOperationOf: self.

	self addLine: 'Balance = ', account balance asString.
	
	^ reportLines! !

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:16'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:55:16'!
PASSED!
!TransferNet methodsFor: 'report' stamp: 'TS 5/31/2023 15:55:23' prior: 50630234 overrides: 16902254!
value
	
	netValue := 0.

	account onTransactionDoOperationOf: self.

	^ netValue! !

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:55:26'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:55:27'!
PASSED!

!testRun: #TransactionReportTest #test01AccountSummaryOfEmptyAccountOnlyContainsBalanceLine stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test02AccountSummaryContainsDepositTransactions stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test03AccountSummaryContainsWithdrawTransactions stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test04AccountSummaryContainsTransfers stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test05TransferNetOfAccountWithNoTransfersIsZero stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test06TransferNetOfReceivingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test07TransferNetOfSendingAccountIsCorrect stamp: 'TS 5/31/2023 15:55:34'!
PASSED!

!testRun: #TransactionReportTest #test08PortfoliosHaveCorrectAccountSummaryAndTransferNet stamp: 'TS 5/31/2023 15:55:34'!
PASSED!
!TransferLeg methodsFor: 'accessing' stamp: 'TS 5/31/2023 15:55:47' prior: 50625308!
transfer

	^ transfer! !
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
Esta clase representa una operación cuyo resultado es una serie de líneas que utiliza indentación para visualizar la estructura del árbol de un Portfolio.!

----SNAPSHOT----(31 May 2023 15:55:55) CuisUniversity-5832.image priorSource: 9665749!
Esta clase representa una operación que se ejecuta sobre todo el árbol de cuentas de un Portfolio!
Esta clase representa una operación cuyo resultado es una serie de líneas que utiliza indentación para visualizar la estructura del árbol de un Portfolio.!

----QUIT----(31 May 2023 15:56:22) CuisUniversity-5832.image priorSource: 9697784!